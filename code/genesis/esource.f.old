      subroutine esource(istepz)
c     ==================================================================
c     calculates the space charge field.
c     all particle are discretized on a radial mesh for all
c     selected azimutal and longitudinal fourier modes.
c     ------------------------------------------------------------------
c
      include  'genesis.def'
      include  'input.cmn'
      include  'particle.cmn'
      include  'work.cmn'
c
      integer m,j,ip,ir,istepz
c
      complex *16 vn,coef,cma(nrgrid),cmb(nrgrid),cmc(nrgrid),
     +            crtmp1(nrgrid),crtmp2(nrgrid),cscsource(nrgrid)
      real*8 econst,rscmax,drsc,vol(nrgrid),xmid,ymid,xks,xkw0,
     +       rmid(nrgrid),rlog(nrgrid),rdig(nrgrid)      
      real*8 ezmax 
c
      if (nscz.le.0) return                       !no space charge selected
c

      xks=twopi/xlamds
      xkw0=twopi/xlamd

      xmid=0.0d0              !get centroid position   
      ymid=0.0d0
      do ip=1,npart
         xmid=xmid+xpart(ip)       
         ymid=ymid+ypart(ip)
      end do       ! i
      if (npart.gt.0) then
        xmid=xmid/dble(npart)   !mean value
        ymid=ymid/dble(npart)     
      endif
c      
      rscmax=0.                                   !clear max radius
      do ip=1,npart 
        ez(ip)=0.d0                               !clear old space charge field
        p1(ip)=dsqrt((xpart(ip)-xmid)**2+(ypart(ip)-ymid)**2)/xkw0   !get radius (in m)
        if (p1(ip).gt.rscmax) rscmax=p1(ip)       !look for maximum radius 
        if (p1(ip).eq.0.) then
           cpart1(ip)=dcmplx(1.d0,0.d0)           !particle in origin
        else 
           cpart1(ip)=dcmplx(ypart(ip)-ymid,-xpart(ip)+xmid)/p1(ip)  !azimutal phase
        end if
      end do
c
      rscmax=2.*rscmax                            !maximum of radial mesh
      if (rscmax.le.0) rscmax=dgrid*xkw0          !catch error of zero size beam
c                                                 !set to radiation grid size
c
      drsc=rscmax/float(nptr-1)                   !gridpoint distance
      do ir=2,nptr
        vol(ir)=pi*drsc*drsc*(2.*ir-1)            !2d volume around grid point
        rlog(ir)=log(float(ir)/float(ir-1))       !log term of higher modes
        rdig(ir)=2.*pi*float(ir-1)                !diagonal terms above/below main diag. 
      end do
      vol(1)=pi*drsc*drsc                         !volume of origin            
      rlog(1)=log(0.5)                            !shielding radius
      rdig(1)=0.                                  !no lower element at origin
      rdig(nptr+1)=0.                             !no upper element at border 
c
      econst=vacimp/eev*xcuren/float(npart)/(xks+xkw0)  !source term normalization
      coef=dcmplx(1.d0/(xks**2-(xks+xkw0)**2),0.d0) !matrix normalisation 
c
      do m=-nscr,nscr                             !count over azimutal modes          
c
         do ip=1,npart                            !get right azimutal component
            cpart2(ip)=cpart1(ip)**m
         end do     
c
         do ir=1,nptr
           rmid(ir)=-rdig(ir)-rdig(ir+1)-2.*pi*float(m*m)*rlog(ir) !main diagonal elements 
         end do
         rmid(nptr)=rmid(nptr)-2.*pi*float(nptr)     !direchlet boundary condition
c         
         do j=1,nscz 
            do ir=1,nptr
               cscsource(ir)=dcmplx(0.d0,0.d0)      !clear source  
            end do
            do ip=1,npart
               ir=int(p1(ip)/drsc)+1               !radial position
               cscsource(ir)=cscsource(ir)+cpart2(ip)* !add long and azimutal phase
     +            dcmplx(dcos(theta(ip)*j),-dsin(theta(ip)*j))   
            enddo 
            do ir=1,nptr 
               vn=dcmplx(0.d0,econst/float(j)/vol(ir)) !complex norm. term
               cscsource(ir)=vn*cscsource(ir)            !scale source term (current density)
               cma(ir)=coef*dcmplx(rdig(ir)/j/j/vol(ir),0.d0)  !construct complex matrix
               cmb(ir)=(1.d0,0.d0)+coef*dcmplx(rmid(ir)/j/j/vol(ir),0.d0)
               cmc(ir)=coef*dcmplx(rdig(ir+1)/j/j/vol(ir),0.d0)
            enddo 
c            
            call trirad(cma,cmb,cmc,cscsource,crtmp1,crtmp2,nptr) !solve equation
c
            do ip=1,npart                         !sum up fourier coefficient
               ir=int(p1(ip)/drsc)+1 
               ez(ip)=ez(ip)+2.*dble(crtmp1(ir)/cpart2(ip)*
     +              dcmplx(dcos(theta(ip)*j),dsin(theta(ip)*j)))   
            end do
        end do
      end do
      ezmax=0.
      do ip=1,npart
         ez(ip)=ez(ip)/xkw0           !scale due to normalized z
         if (ezmax.lt.ez(ip)) ezmax=ez(ip)
      enddo

      return
      
      end 




      subroutine trirad(a,b,c,r,u,w,n)
c     ==================================================================
c     solve a tridiagonal system for radial mesh
c     only called by esource for space charge calculation
c     ------------------------------------------------------------------
c
      integer n,k
      complex*16 w(*),a(*),b(*),c(*),r(*),u(*),bet
c

      bet=b(1)
      u(1)=r(1)/bet
      do k=2,n
	 w(k)=c(k-1)/bet
	 bet=b(k)-a(k)*w(k)
	 u(k)=(r(k)-a(k)*u(k-1))/bet
      end do       ! k
      do k=n-1,1,-1
	 u(k)=u(k)-w(k+1)*u(k+1)
      end do       ! k
c
      return
      end     !trirad
