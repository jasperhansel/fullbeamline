#!/bin/sh
#####################################################################
# This is a script to delete an ENTIRE previously-built CESR release
#####################################################################
#        USE     WITH     CAUTION   
#####################################################################
# Conservative measures have been taken to 
# prevent the accidental deletion of an important release, but if
# you make it through all the error checking and interlocks, this
# script WILL completely delete the entire release that you specify,
# including the build log file.
#   --It will be as if it had never been built in the first place.
#   --You have been warned.
#####################################################################
#   Usage:
#          DELETE_release [-QUIET] [-quiet] REL=release-name 
#
# Optional -QUIET flag will perform the deletion without 
# interactively prompting for confirmation.  This is used primarily
# for automatic scripts.
#####################################################################


# Script help functions
myprint_help () {
# Print help info
    echo ""
    echo "Usage is: DELETE_release [flag] REL=release-name"
    echo ""
    echo "Using no flags will prompt for confirmation."
    echo ""
    echo "-quiet -q  Prompt with no terminal beeping."
    echo "-QUIET -Q  Delete without prompting for confirmation."
    echo "-help      Print full list of command-line flags."
    echo ""
    exit 1
}

myprint_help2 () {
# Print help info
    echo ""
    echo "Usage is: DELETE_release  [flag] REL=release-name"
    echo ""
    echo "Using no flags will prompt for confirmation."
    echo ""
    echo "-quiet -q  Prompt with no terminal beeping."
    echo "-QUIET -Q  Delete without prompting for confirmation."
    echo "-help      Print this usage summary."
    echo ""
    echo "-NOLOCK    Allow deletion of otherwise protected"
    echo "           DEVEL and/or CURRENT releases."
    echo "               USE WITH CAUTION"
    echo ""
    exit 1
}

##########################
#  Main script starts here
##########################
# One hardcoded line here necessary for subsequent getting of config vars.
UTIL_DIR=`/home/cesrulib/bin/util/getcfg Paths UTIL_DIR`

arg_list=""
REL_NAME=""
quiet=0
QUIET=0
NOLOCK=0
PURGE=0

LIBS_DIR=`${UTIL_DIR}/getcfg Paths LIBS_DIR`
LIBS_DIR="${LIBS_DIR}/"
# Path on VMS cluster where release .zip archives are kept
VMS_ZIPDIR=`${UTIL_DIR}/getcfg Paths VMS_ZIPDIR`

PLATFORMS=`${UTIL_DIR}/getcfg Platforms`

if ( [ $# = 0 ] ) then
    myprint_help
    exit 1
fi

#############################
#  Get command-line arguments
#############################
for i
do arg_list="${arg_list} ${i}"
   case $i in
     REL=*       ) REL_NAME=`echo $i | cut -d= -f2` ;;
     "-quiet"  ) quiet=1 ;;
     "-q"       ) quiet=1;;
     "-QUIET"  ) QUIET=1;;
     "-Q"       ) QUIET=1;;
     "-NOLOCK" ) NOLOCK=1;;
     "-quiet"  ) QUIET=1;;
     "-PURGE"  ) PURGE=1;;
     "-help"   ) myprint_help2; exit 1;;
     *           ) myprint_help; exit 1;;
   esac
done

if ( [ ${QUIET} -eq 1 ] && [ ! ${#} -eq 2 ] ) then
    myprint_help
fi

################################################
#  Begin error-checking paranoia
################################################

if ( [ ! -e /home/cesrulib/cesr_libs/log/${REL_NAME}.genlog ] ) then
   echo "Release with name ${REL_NAME} does not exist. (.genlog check)"
   exit 1
fi

if ( [ "${REL_NAME}" = "" ] ) then
    echo "Please specify a build name after REL= on the command line."
    exit 1
fi

# check here to determine if requested release has either
# a current pointer or a devel pointer filesystem link.  If so, abort.
# Generalize here to avoid the need to hardcode any platform name.
if ( [ ${LIBS_DIR}Linux_i686_intel/current -ef ${LIBS_DIR}Linux_i686_intel/${REL_NAME} ] ) then
     echo ""
     echo "The release will not be deleted.  It is the most recent CURRENT release."
     echo ""
     exit 1
fi
if ( [ ${LIBS_DIR}Linux_i686_intel/devel -ef ${LIBS_DIR}Linux_i686_intel/${REL_NAME} ] ) then
     echo ""
     echo "The release will not be deleted.  It is the most recent DEVEL release."
     echo ""
     exit 1
fi

# Test requested release against all older devel and current links.
# Don't delete if the requested release matches any of them.
for j in ${LIBS_DIR}Linux_i686_intel/current*
do
  if ( [ ${j} -ef ${LIBS_DIR}Linux_i686_intel/${REL_NAME} ] ) then
      if ( [ ${NOLOCK} -eq 1 ] && [ ${PURGE} -eq 0 ] ) then
	  echo "You have requested to delete a CURRENT release!  Make sure"
	  echo "this is really what you want to do, then press <ENTER> to continue."
	  read -n 1 CONFIRM1
	  if ( [ ! ${CONFIRM1} = "\n" ] ) then
	      echo ""
	      exit 1
          fi
      else
	  if ( [ ${PURGE} -eq 0 ] ) then
	      echo ""
	      echo "The release will not be deleted.  It is a protected older CURRENT release."
	      echo ""
	      exit 1
          fi
      fi
  fi
done


for k in ${LIBS_DIR}Linux_i686_intel/devel*
do
  if ( [ ${k} -ef ${LIBS_DIR}Linux_i686_intel/${REL_NAME} ] ) then
      if ( [ ${NOLOCK} -eq 1 ] && [ ${PURGE} -eq 0 ]  ) then
	  echo "You have requested to delete a DEVEL release!  Make sure"
	  echo "this is really what you want to do, then press <ENTER> to continue."
	  read -n 1 CONFIRM2
	  if ( [ ! ${CONFIRM2} = "\n" ] ) then
	      echo ""
	      exit 1
	  fi
      else
          if ( [ ${PURGE} -eq 0 ] ) then
              echo ""
              echo "The release will not be deleted.  It is an older DEVEL release."
              echo ""
              exit 1
          fi
      fi
  fi
done

if ( [ ! ${QUIET} -eq 1 ] && [ ${PURGE} -eq 0 ] ) then
    echo ""
    if ( [ ${quiet} -eq 1 ] ) then
        echo "DELETE release - "
    else
        echo -e " DELETE_release - \a "
    fi
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " @  WARNING    WARNING    WARNING    WARNING    WARNING  @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " @                                                       @"
    echo " @        YOU ARE ABOUT TO _COMPLETELY_DELETE_           @" 
    echo " @                                                       @"
    echo " @              *** ${REL_NAME} ***"
    echo " @                                                       @"
    echo " @ FROM ALL PLATFORM DIRECTORIES.  ALL LOG FILES WILL BE @"
    echo " @                   REMOVED AS WELL!                    @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo " Press ENTER to continue with this operation, "
    echo "                                   any other key to abort."

    read -n 1 CONFIRM2
    if ( [ ! ${CONFIRM2} = "\n" ] ) then
        echo ""
        exit 1
    fi

    if ( [ ${quiet} -eq 1 ] ) then
        echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    else
        echo -e " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\a"
    fi
    echo " @                                                       @"
    echo " @ Hit  <CNTRL><C>  _NOW_ IF YOU DO NOT WANT TO DO THIS. @"
    echo " @                (You have 10 seconds)                  @"
    echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    sleep 10
fi
echo -n "DELETING release ${REL_NAME}..."


#################################################################
#  Perform the deletion across all platform archive areas.
#################################################################

#############################################
#  Remove all symbolic links associated with this release
#############################################

for platform in ${PLATFORMS}; do
    for file in ${LIBS_DIR}${platform}/devel*
    do
        if ( [ -L "${file}" ] ) && ( [ $( readlink ${file} ) = ${REL_NAME} ] ) then
            rm -rf ${file}
        fi
    done
done

#############################################
#  Now remove everything else
#############################################

for platform in ${PLATFORMS}; do
    rm -rf /home/cesrulib/cesr_libs/${platform}/${REL_NAME}

    rm -f /home/cesrulib/cesr_libs/log/${platform}/${REL_NAME}.log

    rm -f /home/cesrulib/cesr_libs/${platform}/${REL_NAME}.zip  # VMS area only
done
rm -rf /home/cesrulib/cesr_libs/distribution/${REL_NAME}
rm -f /home/cesrulib/cesr_libs/distribution/${REL_NAME}.tar.gz
rm -f /home/cesrulib/cesr_libs/distribution/log/${REL_NAME}.log


##################################################################
# Delete the release .zip file on the VMS cluster.
##################################################################
ftp cesr2f <<EOF &> /dev/null
    binary
    cd $VMS_ZIPDIR
    delete ${REL_NAME}.zip
EOF
ftp_success=${?}
if ( [ ${ftp_success} -ne 0 ] ) then
    echo "ERROR deleting release zip file on VMS cluster."
    exit 15
fi

##################################################
# Delete .genlog file last to ensure thoroughness
##################################################
rm -f /home/cesrulib/cesr_libs/log/${REL_NAME}.genlog

echo "  DONE."
echo ""

exit 0
