#!/opt/rh/python27/root/usr/bin/python
#---------------------------------------------------
# This script deletes all releases retaining only those that meet
# the retention criteria defined in the
# /home/cesrulib/bin/util/BUILD_SYSTEM.conf file.
#
#-------------------------------------------------------------
# The program does the following:
# 1) Get a list of all the releases of the type cesr_*
#    based on log files from the directory /nfs/acc/libs/log
# 2) Get an array(s) for the releases determining their age
# 3) Do this for each release:
# 4) Determine if a release needs to be deleted
# 5) Delete the release if necessary using the
#    /home/cesrulib/bin/util/DELETE_release script
#--------------------------------------------------------------
# Author: Siarhei Vishniakou / Matt Rendina
# Date: Late November 2007
#--------------------------------------------------------------

import string, os, sys, time, math, ConfigParser
from string import ljust

################
# Set up configuration parser
################
cfg_file = "/home/cesrulib/bin/util/BUILD_SYSTEM.conf"
config   = ConfigParser.ConfigParser()
config.optionxform = lambda x: x
config.read(cfg_file)
################
# Get values
################

UTIL_DIR       = config.get("Paths","UTIL_DIR")
CURRENT_YEARS  = int(config.get("Retention","CURRENT_YEARS"))
CURRENT_MONTHS = int(config.get("Retention","CURRENT_MONTHS"))
CURRENT_DAYS   = int(config.get("Retention","CURRENT_DAYS"))


#### Initialization
#--------------------------------------------------------------------------

releases            = []      #array to hold release names
prefix              = "cesr"  #the mask to discriminate releases. Idea: to get everything that starts with "cesr"
devel_link_prefix   = "devel"   # All symlinks to devel releases start with this
current_link_prefix = "current" # All symlinks to current releases start with this
log_dir             = config.get("Paths","LOG_DIR")   #directory with the .genlog files
delete_util_path    = UTIL_DIR+"/DELETE_release"
log_file            = log_dir + "/purge_releases_log.txt"


current_span    = [ CURRENT_YEARS, CURRENT_MONTHS, CURRENT_DAYS] # Lifespan for current
devel_span      = int(config.get("Retention","DEVEL_SPAN"))      # Starting this many currents ago, all devels will be kept

    
devel_age       = [0, 0, 0] # Age of oldest DEVEL to be retained
timehere        = time.localtime()

#--------------------------------------------------------------------------------
# Release dictionary:
#     Keys are release names.  Each key has a 5-item list holding
#     information relevant to that release, all components form an 'entry'.
#
# "release_name" : [age_years, age_months, age_days, release_type, deletion flag]
#---------------------------------------------------------------------------------
rel_entries  = {}

#--------------------------------------------------------------------------------

print "\npurge_releases:"
print "------------------"
print "All 'CURRENT' releases younger than "+str(current_span[0])+" year(s), "+str(current_span[1]) \
      +" month(s), and "+str(current_span[2])+" day(s) are kept."
print "All devels within the last "+str(devel_span)+" 'CURRENT's are kept."
print "Everything else gets removed."
print "_______________________________________________________"



# Get a list of all the releases of the type cesr_* based on log files
output = os.listdir(log_dir)
for line in output:
    if line[0:len(prefix)] == prefix:
        line = line[:-7] # Remove the .genlog extension
        rel_entries[line] = [-1, -1, -1, "--", "NO"]



################
# Here we establish the age of each release (rough estimate only - using 365 days/year, 30 days/month)
################

for rel in rel_entries:
    time_rel= int(rel[5:9]), int(rel[10:12]), int(rel[12:14]) ,0 ,0 ,0 ,0 ,0 ,0
    
    time_diff           = time.mktime(timehere) - time.mktime(time_rel)
    years               = int(math.floor(time_diff/(60*60*24*365))) # how many years old is the release
    rel_entries[rel][0] = years
    
    time_diff           = time_diff-(60*60*24*365) * years
    months              = int(math.floor(time_diff/(60*60*24*30)))  # how many months old
    rel_entries[rel][1] = months
     
    time_diff           = time_diff-(60*60*24*30) * months
    days                = int(math.floor(time_diff/(60*60*24)))     # how many days old
    rel_entries[rel][2] = days




###############
# Determine the status of each release ("devel", "current", or "none")
###############
### To do this:
### 05) Get a list of all releases in the repository path https:/accserv.lepp.cornell.edu/svn/tags
### using svn list https://accserv.lepp.cornell.edu/svn/tags
### 06) Strip the end of the line symbol and the "/" symbol
### 07) Establish whether a release is found in repository in the /tags directory
### 08) If it is found, determine it's status (devel, current, or none). If not found, give it status none


devel_list = []
for line in os.listdir("/home/cesrulib/acc_libs/Linux_i686_intel"):
    if os.path.islink("/home/cesrulib/acc_libs/Linux_i686_intel/"+line) and line[:5] == 'devel':
        devel_list.append( os.readlink("/home/cesrulib/acc_libs/Linux_i686_intel/"+line) ) 


current_list = []
for line in os.listdir("/home/cesrulib/acc_libs/Linux_i686_intel"):
    if os.path.islink("/home/cesrulib/acc_libs/Linux_i686_intel/"+line) and line[0:7] == 'current':
        current_list.append( os.readlink("/home/cesrulib/acc_libs/Linux_i686_intel/"+line) )



# Determine which releases in the master release list are DEVEL releases
# do this first, it can be overridden below if a release was promoted a
# second time to CURRENT.
for rel in rel_entries:
    for name in devel_list:
        if rel == name:
            rel_entries[rel][3] = 'DEVEL'

for rel in rel_entries:
    for name in current_list:
        if rel == name:
            rel_entries[rel][3] = 'CURRENT'



##### At this point, all releases that have a log file in /nfs/acc/libs/log have been
##### gathered and identified as "current", "devel", or "none"
##### Also, their ages have been determined
##### Next we need:
##### 10) Find a value for devel_age variable (see description on top)
##### 20) Determine the "delete" array (see description)
##### 


# Sort the DEVEL and CURRENT lists according to date in name
devel_list.sort()
current_list.sort()
# Sort names of main release list for later sorted printing
rels_sorted = rel_entries.keys()
rels_sorted.sort()
rels_sorted.reverse()

# Step 10)
num_current = len(current_list)
print "There are "+str(num_current)+" 'CURRENT' releases in the archive.\n"
current_list.reverse() # Now in newest-to-oldest order

current_boundary = current_list[devel_span-1]
devel_age        = [ rel_entries[current_boundary][0], rel_entries[current_boundary][1], rel_entries[current_boundary][2] ]

print "The archived 'CURRENT' release after which all 'DEVELs' will be kept is " + current_boundary
print "This release is "+str(devel_age[0])+" years, "+str(devel_age[1])+" months, "+str(devel_age[2])+" days old."
print "All non-current releases older than this will be deleted.\n"


##########################################################
##########
########## This is the removal criteria being implemented: (step 20)
##########
###########################################################
time_devel_age   = time.mktime( devel_age + [0,0,0,0,0,0] )
time_current_age = time.mktime( current_span + [0,0,0,0,0,0] )

for rel in rel_entries:
    rel_time = time.mktime( rel_entries[rel][0:3] + [0,0,0,0,0,0] )
    # If older than oldest retained CURRENT release, flag for deletion
    if (rel_time - time_current_age) > 0: 
        rel_entries[rel][4] = 'YES'
    # If not current, and older than devel_age, flag.
    elif (rel_entries[rel][3] != "CURRENT") and (rel_time - time_devel_age > 0): 
        rel_entries[rel][4] = 'YES'
    # If not CURRENT or DEVEL and older than 2 days, flag.
    elif (rel_entries[rel][2] >= 2) and (rel_entries[rel][3] != "CURRENT") and (rel_entries[rel][3] != "DEVEL"):
        rel_entries[rel][4] = 'YES' 



# Tally up the number of releases flagged for deletion
flagged = 0
for rel in rel_entries:
    if (rel_entries[rel][4] == 'YES'):
        flagged = flagged + 1


# Print a summary table of release names, ages, types and deletion flag.
# Write same results to log file.
#------------------------------------------------------------------------
for ppass in range(2):
    if ppass == 1:
        log = open(log_file,'w')
        sys.stdout = log # Redirect prints for this pass to log file.

    print time.strftime('%X %x %Z')
    
    if flagged == 0:
        print "There are no releases to be deleted."
    else:
        print "A total of "+str(flagged)+" release(s) will be deleted."
    
        print ""
        print "                       Age                     "
        print "      Name          (y, m, d)   Type   DELETE? "
        print "-----------------------------------------------"

        for rel in rels_sorted:
            yr      = str(rel_entries[rel][0])
            mo      = str(rel_entries[rel][1])
            dy      = str(rel_entries[rel][2])
            type    = rel_entries[rel][3]
            delflag = rel_entries[rel][4]
            print ljust(rel, 19), ljust(yr,3), ljust(mo,3), ljust(dy,3), ljust(type,8), delflag



#########
######### Now use the utility "DELETE_release" in the utils folder with -PURGE flag to remove unwanted releases
#########
cmd_output = []

print ""
for rel in rel_entries:
    if rel_entries[rel][4] == 'YES':
        out = os.popen(delete_util_path+" -PURGE REL="+rel).readlines()
        cmd_output.append(out)


# Dump output of DELETE_release script to logfile only
for line in cmd_output:
    print line


# Restore print operator back to standard output
sys.stdout = sys.__stdout__



log.close()

