
//+
// C++ equality functions for Bmad / C++ structure interface.
//
// This file is generated as part of the Bmad/C++ interface code generation.
// The code generation files can be found in cpp_bmad_interface.
//
// DO NOT EDIT THIS FILE DIRECTLY! 
//-

#include <iostream>
#include <stdlib.h>
#include "cpp_bmad_classes.h"

using namespace std;

//---------------------------------------------------

template <class T> bool is_all_equal (const valarray<T>& vec1, const valarray<T>& vec2) {
  bool is_eq = true;
  if (vec1.size() != vec2.size()) return false;
  for (unsigned int i = 0; i < vec1.size(); i++) {
    is_eq = is_eq && (vec1[i] == vec2[i]);
  }
  return is_eq;
}

template <class T> bool is_all_equal (const valarray< valarray<T> >& mat1, const valarray< valarray<T> >& mat2) {
  bool is_eq = true;
  if (mat1.size() != mat2.size()) return false;
  for (unsigned int i = 0; i < mat1.size(); i++) {
    if (mat1[i].size() != mat2[i].size()) return false;
    for (unsigned int j = 0; j < mat1[i].size(); j++) {
      is_eq = is_eq && (mat1[i][j] == mat2[i][j]);
    }
  }
  return is_eq;
};

template <class T> bool is_all_equal (const valarray< valarray< valarray<T> > >& tensor1, const valarray< valarray< valarray<T> > >& tensor2) {
  bool is_eq = true;
  if (tensor1.size() != tensor2.size()) return false;
  for (unsigned int i = 0; i < tensor1.size(); i++) {
    if (tensor1[i].size() != tensor2[i].size()) return false;
    for (unsigned int j = 0; j < tensor1[i].size(); j++) {
      if (tensor1[i][j].size() != tensor2[i][j].size()) return false;
      for (unsigned int k = 0; k < tensor1[i][j].size(); k++) {
        is_eq = is_eq && (tensor1[i][j][k] == tensor2[i][j][k]);
      }
    }
  }
  return is_eq;
};

//---------------------------------------------------

template bool is_all_equal (const Bool_ARRAY&,     const Bool_ARRAY&);
template bool is_all_equal (const Complex_ARRAY&,  const Complex_ARRAY&);
template bool is_all_equal (const Real_ARRAY&,     const Real_ARRAY&);
template bool is_all_equal (const Int_ARRAY&,      const Int_ARRAY&);
template bool is_all_equal (const String_ARRAY&,   const String_ARRAY&);

template bool is_all_equal (const Bool_MATRIX&,     const Bool_MATRIX&);
template bool is_all_equal (const Complex_MATRIX&,  const Complex_MATRIX&);
template bool is_all_equal (const Real_MATRIX&,     const Real_MATRIX&);
template bool is_all_equal (const Int_MATRIX&,      const Int_MATRIX&);

template bool is_all_equal (const Complex_TENSOR&,  const Complex_TENSOR&);
template bool is_all_equal (const Real_TENSOR&,     const Real_TENSOR&);
template bool is_all_equal (const Int_TENSOR&,      const Int_TENSOR&);


//--------------------------------------------------------------

bool operator== (const CPP_spline& x, const CPP_spline& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.x0 == y.x0);
  is_eq = is_eq && (x.y0 == y.y0);
  is_eq = is_eq && (x.x1 == y.x1);
  is_eq = is_eq && is_all_equal(x.coef, y.coef);
  return is_eq;
};

template bool is_all_equal (const CPP_spline_ARRAY&, const CPP_spline_ARRAY&);
template bool is_all_equal (const CPP_spline_MATRIX&, const CPP_spline_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_spin_polar& x, const CPP_spin_polar& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.polarization == y.polarization);
  is_eq = is_eq && (x.theta == y.theta);
  is_eq = is_eq && (x.phi == y.phi);
  is_eq = is_eq && (x.xi == y.xi);
  return is_eq;
};

template bool is_all_equal (const CPP_spin_polar_ARRAY&, const CPP_spin_polar_ARRAY&);
template bool is_all_equal (const CPP_spin_polar_MATRIX&, const CPP_spin_polar_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_surface_orientation& x, const CPP_surface_orientation& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.x_pitch == y.x_pitch);
  is_eq = is_eq && (x.y_pitch == y.y_pitch);
  is_eq = is_eq && (x.x_pitch_rms == y.x_pitch_rms);
  is_eq = is_eq && (x.y_pitch_rms == y.y_pitch_rms);
  return is_eq;
};

template bool is_all_equal (const CPP_surface_orientation_ARRAY&, const CPP_surface_orientation_ARRAY&);
template bool is_all_equal (const CPP_surface_orientation_MATRIX&, const CPP_surface_orientation_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_ac_kicker_time& x, const CPP_ac_kicker_time& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.amp == y.amp);
  is_eq = is_eq && (x.time == y.time);
  is_eq = is_eq && (x.spline == y.spline);
  return is_eq;
};

template bool is_all_equal (const CPP_ac_kicker_time_ARRAY&, const CPP_ac_kicker_time_ARRAY&);
template bool is_all_equal (const CPP_ac_kicker_time_MATRIX&, const CPP_ac_kicker_time_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_ac_kicker_freq& x, const CPP_ac_kicker_freq& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.f == y.f);
  is_eq = is_eq && (x.amp == y.amp);
  is_eq = is_eq && (x.phi == y.phi);
  return is_eq;
};

template bool is_all_equal (const CPP_ac_kicker_freq_ARRAY&, const CPP_ac_kicker_freq_ARRAY&);
template bool is_all_equal (const CPP_ac_kicker_freq_MATRIX&, const CPP_ac_kicker_freq_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_ac_kicker& x, const CPP_ac_kicker& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.amp_vs_time, y.amp_vs_time);
  is_eq = is_eq && is_all_equal(x.frequencies, y.frequencies);
  return is_eq;
};

template bool is_all_equal (const CPP_ac_kicker_ARRAY&, const CPP_ac_kicker_ARRAY&);
template bool is_all_equal (const CPP_ac_kicker_MATRIX&, const CPP_ac_kicker_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_interval1_coef& x, const CPP_interval1_coef& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.c0 == y.c0);
  is_eq = is_eq && (x.c1 == y.c1);
  is_eq = is_eq && (x.n_exp == y.n_exp);
  return is_eq;
};

template bool is_all_equal (const CPP_interval1_coef_ARRAY&, const CPP_interval1_coef_ARRAY&);
template bool is_all_equal (const CPP_interval1_coef_MATRIX&, const CPP_interval1_coef_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_reflect_table& x, const CPP_photon_reflect_table& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.angle, y.angle);
  is_eq = is_eq && is_all_equal(x.energy, y.energy);
  is_eq = is_eq && is_all_equal(x.int1, y.int1);
  is_eq = is_eq && is_all_equal(x.p_reflect, y.p_reflect);
  is_eq = is_eq && (x.max_energy == y.max_energy);
  is_eq = is_eq && is_all_equal(x.p_reflect_scratch, y.p_reflect_scratch);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_reflect_table_ARRAY&, const CPP_photon_reflect_table_ARRAY&);
template bool is_all_equal (const CPP_photon_reflect_table_MATRIX&, const CPP_photon_reflect_table_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_reflect_surface& x, const CPP_photon_reflect_surface& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.description == y.description);
  is_eq = is_eq && (x.reflectivity_file == y.reflectivity_file);
  is_eq = is_eq && is_all_equal(x.table, y.table);
  is_eq = is_eq && (x.surface_roughness_rms == y.surface_roughness_rms);
  is_eq = is_eq && (x.roughness_correlation_len == y.roughness_correlation_len);
  is_eq = is_eq && (x.initialized == y.initialized);
  is_eq = is_eq && (x.ix_surface == y.ix_surface);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_reflect_surface_ARRAY&, const CPP_photon_reflect_surface_ARRAY&);
template bool is_all_equal (const CPP_photon_reflect_surface_MATRIX&, const CPP_photon_reflect_surface_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_controller_var& x, const CPP_controller_var& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.value == y.value);
  is_eq = is_eq && (x.old_value == y.old_value);
  return is_eq;
};

template bool is_all_equal (const CPP_controller_var_ARRAY&, const CPP_controller_var_ARRAY&);
template bool is_all_equal (const CPP_controller_var_MATRIX&, const CPP_controller_var_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_coord& x, const CPP_coord& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.vec, y.vec);
  is_eq = is_eq && (x.s == y.s);
  is_eq = is_eq && (x.t == y.t);
  is_eq = is_eq && is_all_equal(x.spin, y.spin);
  is_eq = is_eq && is_all_equal(x.field, y.field);
  is_eq = is_eq && is_all_equal(x.phase, y.phase);
  is_eq = is_eq && (x.charge == y.charge);
  is_eq = is_eq && (x.path_len == y.path_len);
  is_eq = is_eq && (x.p0c == y.p0c);
  is_eq = is_eq && (x.beta == y.beta);
  is_eq = is_eq && (x.ix_ele == y.ix_ele);
  is_eq = is_eq && (x.state == y.state);
  is_eq = is_eq && (x.direction == y.direction);
  is_eq = is_eq && (x.species == y.species);
  is_eq = is_eq && (x.location == y.location);
  return is_eq;
};

template bool is_all_equal (const CPP_coord_ARRAY&, const CPP_coord_ARRAY&);
template bool is_all_equal (const CPP_coord_MATRIX&, const CPP_coord_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_coord_array& x, const CPP_coord_array& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.orbit, y.orbit);
  return is_eq;
};

template bool is_all_equal (const CPP_coord_array_ARRAY&, const CPP_coord_array_ARRAY&);
template bool is_all_equal (const CPP_coord_array_MATRIX&, const CPP_coord_array_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_bpm_phase_coupling& x, const CPP_bpm_phase_coupling& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.k_22a == y.k_22a);
  is_eq = is_eq && (x.k_12a == y.k_12a);
  is_eq = is_eq && (x.k_11b == y.k_11b);
  is_eq = is_eq && (x.k_12b == y.k_12b);
  is_eq = is_eq && (x.cbar22_a == y.cbar22_a);
  is_eq = is_eq && (x.cbar12_a == y.cbar12_a);
  is_eq = is_eq && (x.cbar11_b == y.cbar11_b);
  is_eq = is_eq && (x.cbar12_b == y.cbar12_b);
  is_eq = is_eq && (x.phi_a == y.phi_a);
  is_eq = is_eq && (x.phi_b == y.phi_b);
  return is_eq;
};

template bool is_all_equal (const CPP_bpm_phase_coupling_ARRAY&, const CPP_bpm_phase_coupling_ARRAY&);
template bool is_all_equal (const CPP_bpm_phase_coupling_MATRIX&, const CPP_bpm_phase_coupling_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_expression_atom& x, const CPP_expression_atom& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && (x.value == y.value);
  return is_eq;
};

template bool is_all_equal (const CPP_expression_atom_ARRAY&, const CPP_expression_atom_ARRAY&);
template bool is_all_equal (const CPP_expression_atom_MATRIX&, const CPP_expression_atom_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake_sr_mode& x, const CPP_wake_sr_mode& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.amp == y.amp);
  is_eq = is_eq && (x.damp == y.damp);
  is_eq = is_eq && (x.k == y.k);
  is_eq = is_eq && (x.phi == y.phi);
  is_eq = is_eq && (x.b_sin == y.b_sin);
  is_eq = is_eq && (x.b_cos == y.b_cos);
  is_eq = is_eq && (x.a_sin == y.a_sin);
  is_eq = is_eq && (x.a_cos == y.a_cos);
  is_eq = is_eq && (x.polarization == y.polarization);
  is_eq = is_eq && (x.transverse_dependence == y.transverse_dependence);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_sr_mode_ARRAY&, const CPP_wake_sr_mode_ARRAY&);
template bool is_all_equal (const CPP_wake_sr_mode_MATRIX&, const CPP_wake_sr_mode_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake_sr& x, const CPP_wake_sr& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.mode, y.mode);
  is_eq = is_eq && (x.z_ref == y.z_ref);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_sr_ARRAY&, const CPP_wake_sr_ARRAY&);
template bool is_all_equal (const CPP_wake_sr_MATRIX&, const CPP_wake_sr_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake_lr_mode& x, const CPP_wake_lr_mode& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.freq == y.freq);
  is_eq = is_eq && (x.freq_in == y.freq_in);
  is_eq = is_eq && (x.r_over_q == y.r_over_q);
  is_eq = is_eq && (x.q == y.q);
  is_eq = is_eq && (x.angle == y.angle);
  is_eq = is_eq && (x.b_sin == y.b_sin);
  is_eq = is_eq && (x.b_cos == y.b_cos);
  is_eq = is_eq && (x.a_sin == y.a_sin);
  is_eq = is_eq && (x.a_cos == y.a_cos);
  is_eq = is_eq && (x.t_ref == y.t_ref);
  is_eq = is_eq && (x.m == y.m);
  is_eq = is_eq && (x.polarized == y.polarized);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_lr_mode_ARRAY&, const CPP_wake_lr_mode_ARRAY&);
template bool is_all_equal (const CPP_wake_lr_mode_MATRIX&, const CPP_wake_lr_mode_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake_lr_position1& x, const CPP_wake_lr_position1& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.vec, y.vec);
  is_eq = is_eq && (x.charge == y.charge);
  is_eq = is_eq && (x.t == y.t);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_lr_position1_ARRAY&, const CPP_wake_lr_position1_ARRAY&);
template bool is_all_equal (const CPP_wake_lr_position1_MATRIX&, const CPP_wake_lr_position1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake_lr_spline& x, const CPP_wake_lr_spline& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.spline, y.spline);
  is_eq = is_eq && is_all_equal(x.bunch, y.bunch);
  is_eq = is_eq && (x.t_max == y.t_max);
  is_eq = is_eq && (x.polarization_angle == y.polarization_angle);
  is_eq = is_eq && (x.polarized == y.polarized);
  is_eq = is_eq && (x.transverse_dependence == y.transverse_dependence);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_lr_spline_ARRAY&, const CPP_wake_lr_spline_ARRAY&);
template bool is_all_equal (const CPP_wake_lr_spline_MATRIX&, const CPP_wake_lr_spline_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_lat_ele_loc& x, const CPP_lat_ele_loc& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ix_ele == y.ix_ele);
  is_eq = is_eq && (x.ix_branch == y.ix_branch);
  return is_eq;
};

template bool is_all_equal (const CPP_lat_ele_loc_ARRAY&, const CPP_lat_ele_loc_ARRAY&);
template bool is_all_equal (const CPP_lat_ele_loc_MATRIX&, const CPP_lat_ele_loc_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wake& x, const CPP_wake& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.sr_file == y.sr_file);
  is_eq = is_eq && (x.lr_file == y.lr_file);
  is_eq = is_eq && (x.sr_long == y.sr_long);
  is_eq = is_eq && (x.sr_trans == y.sr_trans);
  is_eq = is_eq && is_all_equal(x.lr_mode, y.lr_mode);
  is_eq = is_eq && is_all_equal(x.lr_spline, y.lr_spline);
  is_eq = is_eq && (x.z_sr_max == y.z_sr_max);
  is_eq = is_eq && (x.lr_freq_spread == y.lr_freq_spread);
  is_eq = is_eq && (x.lr_self_wake_on == y.lr_self_wake_on);
  return is_eq;
};

template bool is_all_equal (const CPP_wake_ARRAY&, const CPP_wake_ARRAY&);
template bool is_all_equal (const CPP_wake_MATRIX&, const CPP_wake_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_taylor_term& x, const CPP_taylor_term& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.coef == y.coef);
  is_eq = is_eq && is_all_equal(x.expn, y.expn);
  return is_eq;
};

template bool is_all_equal (const CPP_taylor_term_ARRAY&, const CPP_taylor_term_ARRAY&);
template bool is_all_equal (const CPP_taylor_term_MATRIX&, const CPP_taylor_term_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_taylor& x, const CPP_taylor& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ref == y.ref);
  is_eq = is_eq && is_all_equal(x.term, y.term);
  return is_eq;
};

template bool is_all_equal (const CPP_taylor_ARRAY&, const CPP_taylor_ARRAY&);
template bool is_all_equal (const CPP_taylor_MATRIX&, const CPP_taylor_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_em_taylor_term& x, const CPP_em_taylor_term& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.coef == y.coef);
  is_eq = is_eq && is_all_equal(x.expn, y.expn);
  return is_eq;
};

template bool is_all_equal (const CPP_em_taylor_term_ARRAY&, const CPP_em_taylor_term_ARRAY&);
template bool is_all_equal (const CPP_em_taylor_term_MATRIX&, const CPP_em_taylor_term_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_em_taylor& x, const CPP_em_taylor& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ref == y.ref);
  is_eq = is_eq && is_all_equal(x.term, y.term);
  return is_eq;
};

template bool is_all_equal (const CPP_em_taylor_ARRAY&, const CPP_em_taylor_ARRAY&);
template bool is_all_equal (const CPP_em_taylor_MATRIX&, const CPP_em_taylor_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cartesian_map_term1& x, const CPP_cartesian_map_term1& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.coef == y.coef);
  is_eq = is_eq && (x.kx == y.kx);
  is_eq = is_eq && (x.ky == y.ky);
  is_eq = is_eq && (x.kz == y.kz);
  is_eq = is_eq && (x.x0 == y.x0);
  is_eq = is_eq && (x.y0 == y.y0);
  is_eq = is_eq && (x.phi_z == y.phi_z);
  is_eq = is_eq && (x.type == y.type);
  return is_eq;
};

template bool is_all_equal (const CPP_cartesian_map_term1_ARRAY&, const CPP_cartesian_map_term1_ARRAY&);
template bool is_all_equal (const CPP_cartesian_map_term1_MATRIX&, const CPP_cartesian_map_term1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cartesian_map_term& x, const CPP_cartesian_map_term& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file == y.file);
  is_eq = is_eq && (x.n_link == y.n_link);
  is_eq = is_eq && is_all_equal(x.term, y.term);
  return is_eq;
};

template bool is_all_equal (const CPP_cartesian_map_term_ARRAY&, const CPP_cartesian_map_term_ARRAY&);
template bool is_all_equal (const CPP_cartesian_map_term_MATRIX&, const CPP_cartesian_map_term_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cartesian_map& x, const CPP_cartesian_map& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.field_scale == y.field_scale);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && (x.master_parameter == y.master_parameter);
  is_eq = is_eq && (x.ele_anchor_pt == y.ele_anchor_pt);
  is_eq = is_eq && (x.field_type == y.field_type);
  is_eq = is_eq && ((x.ptr == NULL) == (y.ptr == NULL));
  if (!is_eq) return false;
  if (x.ptr != NULL) is_eq = (*x.ptr == *y.ptr);
  return is_eq;
};

template bool is_all_equal (const CPP_cartesian_map_ARRAY&, const CPP_cartesian_map_ARRAY&);
template bool is_all_equal (const CPP_cartesian_map_MATRIX&, const CPP_cartesian_map_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cylindrical_map_term1& x, const CPP_cylindrical_map_term1& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.e_coef == y.e_coef);
  is_eq = is_eq && (x.b_coef == y.b_coef);
  return is_eq;
};

template bool is_all_equal (const CPP_cylindrical_map_term1_ARRAY&, const CPP_cylindrical_map_term1_ARRAY&);
template bool is_all_equal (const CPP_cylindrical_map_term1_MATRIX&, const CPP_cylindrical_map_term1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cylindrical_map_term& x, const CPP_cylindrical_map_term& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file == y.file);
  is_eq = is_eq && (x.n_link == y.n_link);
  is_eq = is_eq && is_all_equal(x.term, y.term);
  return is_eq;
};

template bool is_all_equal (const CPP_cylindrical_map_term_ARRAY&, const CPP_cylindrical_map_term_ARRAY&);
template bool is_all_equal (const CPP_cylindrical_map_term_MATRIX&, const CPP_cylindrical_map_term_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_cylindrical_map& x, const CPP_cylindrical_map& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.m == y.m);
  is_eq = is_eq && (x.harmonic == y.harmonic);
  is_eq = is_eq && (x.phi0_fieldmap == y.phi0_fieldmap);
  is_eq = is_eq && (x.theta0_azimuth == y.theta0_azimuth);
  is_eq = is_eq && (x.field_scale == y.field_scale);
  is_eq = is_eq && (x.master_parameter == y.master_parameter);
  is_eq = is_eq && (x.ele_anchor_pt == y.ele_anchor_pt);
  is_eq = is_eq && (x.dz == y.dz);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && ((x.ptr == NULL) == (y.ptr == NULL));
  if (!is_eq) return false;
  if (x.ptr != NULL) is_eq = (*x.ptr == *y.ptr);
  return is_eq;
};

template bool is_all_equal (const CPP_cylindrical_map_ARRAY&, const CPP_cylindrical_map_ARRAY&);
template bool is_all_equal (const CPP_cylindrical_map_MATRIX&, const CPP_cylindrical_map_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_grid_field_pt1& x, const CPP_grid_field_pt1& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.e, y.e);
  is_eq = is_eq && is_all_equal(x.b, y.b);
  return is_eq;
};

template bool is_all_equal (const CPP_grid_field_pt1_ARRAY&, const CPP_grid_field_pt1_ARRAY&);
template bool is_all_equal (const CPP_grid_field_pt1_MATRIX&, const CPP_grid_field_pt1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_grid_field_pt& x, const CPP_grid_field_pt& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file == y.file);
  is_eq = is_eq && (x.n_link == y.n_link);
  is_eq = is_eq && is_all_equal(x.pt, y.pt);
  return is_eq;
};

template bool is_all_equal (const CPP_grid_field_pt_ARRAY&, const CPP_grid_field_pt_ARRAY&);
template bool is_all_equal (const CPP_grid_field_pt_MATRIX&, const CPP_grid_field_pt_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_grid_field& x, const CPP_grid_field& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.geometry == y.geometry);
  is_eq = is_eq && (x.harmonic == y.harmonic);
  is_eq = is_eq && (x.phi0_fieldmap == y.phi0_fieldmap);
  is_eq = is_eq && (x.field_scale == y.field_scale);
  is_eq = is_eq && (x.field_type == y.field_type);
  is_eq = is_eq && (x.master_parameter == y.master_parameter);
  is_eq = is_eq && (x.ele_anchor_pt == y.ele_anchor_pt);
  is_eq = is_eq && is_all_equal(x.dr, y.dr);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && (x.curved_ref_frame == y.curved_ref_frame);
  is_eq = is_eq && ((x.ptr == NULL) == (y.ptr == NULL));
  if (!is_eq) return false;
  if (x.ptr != NULL) is_eq = (*x.ptr == *y.ptr);
  return is_eq;
};

template bool is_all_equal (const CPP_grid_field_ARRAY&, const CPP_grid_field_ARRAY&);
template bool is_all_equal (const CPP_grid_field_MATRIX&, const CPP_grid_field_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_taylor_field_plane1& x, const CPP_taylor_field_plane1& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.field, y.field);
  return is_eq;
};

template bool is_all_equal (const CPP_taylor_field_plane1_ARRAY&, const CPP_taylor_field_plane1_ARRAY&);
template bool is_all_equal (const CPP_taylor_field_plane1_MATRIX&, const CPP_taylor_field_plane1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_taylor_field_plane& x, const CPP_taylor_field_plane& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file == y.file);
  is_eq = is_eq && (x.n_link == y.n_link);
  is_eq = is_eq && is_all_equal(x.plane, y.plane);
  return is_eq;
};

template bool is_all_equal (const CPP_taylor_field_plane_ARRAY&, const CPP_taylor_field_plane_ARRAY&);
template bool is_all_equal (const CPP_taylor_field_plane_MATRIX&, const CPP_taylor_field_plane_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_taylor_field& x, const CPP_taylor_field& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ele_anchor_pt == y.ele_anchor_pt);
  is_eq = is_eq && (x.field_type == y.field_type);
  is_eq = is_eq && (x.dz == y.dz);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && (x.field_scale == y.field_scale);
  is_eq = is_eq && (x.master_parameter == y.master_parameter);
  is_eq = is_eq && (x.curved_ref_frame == y.curved_ref_frame);
  is_eq = is_eq && (x.canonical_tracking == y.canonical_tracking);
  is_eq = is_eq && ((x.ptr == NULL) == (y.ptr == NULL));
  if (!is_eq) return false;
  if (x.ptr != NULL) is_eq = (*x.ptr == *y.ptr);
  return is_eq;
};

template bool is_all_equal (const CPP_taylor_field_ARRAY&, const CPP_taylor_field_ARRAY&);
template bool is_all_equal (const CPP_taylor_field_MATRIX&, const CPP_taylor_field_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_floor_position& x, const CPP_floor_position& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.r, y.r);
  is_eq = is_eq && is_all_equal(x.w, y.w);
  is_eq = is_eq && (x.theta == y.theta);
  is_eq = is_eq && (x.phi == y.phi);
  is_eq = is_eq && (x.psi == y.psi);
  return is_eq;
};

template bool is_all_equal (const CPP_floor_position_ARRAY&, const CPP_floor_position_ARRAY&);
template bool is_all_equal (const CPP_floor_position_MATRIX&, const CPP_floor_position_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_space_charge& x, const CPP_space_charge& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.closed_orb == y.closed_orb);
  is_eq = is_eq && (x.kick_const == y.kick_const);
  is_eq = is_eq && (x.sig_x == y.sig_x);
  is_eq = is_eq && (x.sig_y == y.sig_y);
  is_eq = is_eq && (x.phi == y.phi);
  is_eq = is_eq && (x.sin_phi == y.sin_phi);
  is_eq = is_eq && (x.cos_phi == y.cos_phi);
  is_eq = is_eq && (x.sig_z == y.sig_z);
  return is_eq;
};

template bool is_all_equal (const CPP_space_charge_ARRAY&, const CPP_space_charge_ARRAY&);
template bool is_all_equal (const CPP_space_charge_MATRIX&, const CPP_space_charge_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_xy_disp& x, const CPP_xy_disp& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.eta == y.eta);
  is_eq = is_eq && (x.etap == y.etap);
  return is_eq;
};

template bool is_all_equal (const CPP_xy_disp_ARRAY&, const CPP_xy_disp_ARRAY&);
template bool is_all_equal (const CPP_xy_disp_MATRIX&, const CPP_xy_disp_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_twiss& x, const CPP_twiss& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.beta == y.beta);
  is_eq = is_eq && (x.alpha == y.alpha);
  is_eq = is_eq && (x.gamma == y.gamma);
  is_eq = is_eq && (x.phi == y.phi);
  is_eq = is_eq && (x.eta == y.eta);
  is_eq = is_eq && (x.etap == y.etap);
  is_eq = is_eq && (x.sigma == y.sigma);
  is_eq = is_eq && (x.sigma_p == y.sigma_p);
  is_eq = is_eq && (x.emit == y.emit);
  is_eq = is_eq && (x.norm_emit == y.norm_emit);
  return is_eq;
};

template bool is_all_equal (const CPP_twiss_ARRAY&, const CPP_twiss_ARRAY&);
template bool is_all_equal (const CPP_twiss_MATRIX&, const CPP_twiss_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_mode3& x, const CPP_mode3& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.v, y.v);
  is_eq = is_eq && (x.a == y.a);
  is_eq = is_eq && (x.b == y.b);
  is_eq = is_eq && (x.c == y.c);
  is_eq = is_eq && (x.x == y.x);
  is_eq = is_eq && (x.y == y.y);
  return is_eq;
};

template bool is_all_equal (const CPP_mode3_ARRAY&, const CPP_mode3_ARRAY&);
template bool is_all_equal (const CPP_mode3_MATRIX&, const CPP_mode3_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_bookkeeping_state& x, const CPP_bookkeeping_state& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.attributes == y.attributes);
  is_eq = is_eq && (x.control == y.control);
  is_eq = is_eq && (x.floor_position == y.floor_position);
  is_eq = is_eq && (x.s_position == y.s_position);
  is_eq = is_eq && (x.ref_energy == y.ref_energy);
  is_eq = is_eq && (x.mat6 == y.mat6);
  is_eq = is_eq && (x.rad_int == y.rad_int);
  is_eq = is_eq && (x.ptc == y.ptc);
  return is_eq;
};

template bool is_all_equal (const CPP_bookkeeping_state_ARRAY&, const CPP_bookkeeping_state_ARRAY&);
template bool is_all_equal (const CPP_bookkeeping_state_MATRIX&, const CPP_bookkeeping_state_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_rad_int_ele_cache& x, const CPP_rad_int_ele_cache& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.orb0, y.orb0);
  is_eq = is_eq && (x.g2_0 == y.g2_0);
  is_eq = is_eq && (x.g3_0 == y.g3_0);
  is_eq = is_eq && is_all_equal(x.dg2_dorb, y.dg2_dorb);
  is_eq = is_eq && is_all_equal(x.dg3_dorb, y.dg3_dorb);
  is_eq = is_eq && (x.stale == y.stale);
  return is_eq;
};

template bool is_all_equal (const CPP_rad_int_ele_cache_ARRAY&, const CPP_rad_int_ele_cache_ARRAY&);
template bool is_all_equal (const CPP_rad_int_ele_cache_MATRIX&, const CPP_rad_int_ele_cache_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_surface_grid_pt& x, const CPP_surface_grid_pt& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.orientation == y.orientation);
  is_eq = is_eq && (x.n_photon == y.n_photon);
  is_eq = is_eq && (x.e_x == y.e_x);
  is_eq = is_eq && (x.e_y == y.e_y);
  is_eq = is_eq && (x.intensity_x == y.intensity_x);
  is_eq = is_eq && (x.intensity_y == y.intensity_y);
  is_eq = is_eq && (x.intensity == y.intensity);
  is_eq = is_eq && is_all_equal(x.orbit, y.orbit);
  is_eq = is_eq && is_all_equal(x.orbit_rms, y.orbit_rms);
  is_eq = is_eq && is_all_equal(x.init_orbit, y.init_orbit);
  is_eq = is_eq && is_all_equal(x.init_orbit_rms, y.init_orbit_rms);
  return is_eq;
};

template bool is_all_equal (const CPP_surface_grid_pt_ARRAY&, const CPP_surface_grid_pt_ARRAY&);
template bool is_all_equal (const CPP_surface_grid_pt_MATRIX&, const CPP_surface_grid_pt_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_surface_grid& x, const CPP_surface_grid& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file == y.file);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && is_all_equal(x.dr, y.dr);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && is_all_equal(x.pt, y.pt);
  return is_eq;
};

template bool is_all_equal (const CPP_surface_grid_ARRAY&, const CPP_surface_grid_ARRAY&);
template bool is_all_equal (const CPP_surface_grid_MATRIX&, const CPP_surface_grid_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_segmented_surface& x, const CPP_segmented_surface& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ix == y.ix);
  is_eq = is_eq && (x.iy == y.iy);
  is_eq = is_eq && (x.x0 == y.x0);
  is_eq = is_eq && (x.y0 == y.y0);
  is_eq = is_eq && (x.z0 == y.z0);
  is_eq = is_eq && (x.slope_x == y.slope_x);
  is_eq = is_eq && (x.slope_y == y.slope_y);
  return is_eq;
};

template bool is_all_equal (const CPP_segmented_surface_ARRAY&, const CPP_segmented_surface_ARRAY&);
template bool is_all_equal (const CPP_segmented_surface_MATRIX&, const CPP_segmented_surface_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_target_point& x, const CPP_target_point& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.r, y.r);
  return is_eq;
};

template bool is_all_equal (const CPP_target_point_ARRAY&, const CPP_target_point_ARRAY&);
template bool is_all_equal (const CPP_target_point_MATRIX&, const CPP_target_point_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_surface& x, const CPP_photon_surface& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.grid == y.grid);
  is_eq = is_eq && (x.segment == y.segment);
  is_eq = is_eq && is_all_equal(x.curvature_xy, y.curvature_xy);
  is_eq = is_eq && (x.has_curvature == y.has_curvature);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_surface_ARRAY&, const CPP_photon_surface_ARRAY&);
template bool is_all_equal (const CPP_photon_surface_MATRIX&, const CPP_photon_surface_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_target& x, const CPP_photon_target& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.deterministic_grid == y.deterministic_grid);
  is_eq = is_eq && (x.ix_grid == y.ix_grid);
  is_eq = is_eq && (x.iy_grid == y.iy_grid);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && (x.n_corner == y.n_corner);
  is_eq = is_eq && (x.ele_loc == y.ele_loc);
  is_eq = is_eq && is_all_equal(x.corner, y.corner);
  is_eq = is_eq && (x.center == y.center);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_target_ARRAY&, const CPP_photon_target_ARRAY&);
template bool is_all_equal (const CPP_photon_target_MATRIX&, const CPP_photon_target_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_material& x, const CPP_photon_material& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.f0_m1 == y.f0_m1);
  is_eq = is_eq && (x.f0_m2 == y.f0_m2);
  is_eq = is_eq && (x.f_0 == y.f_0);
  is_eq = is_eq && (x.f_h == y.f_h);
  is_eq = is_eq && (x.f_hbar == y.f_hbar);
  is_eq = is_eq && (x.f_hkl == y.f_hkl);
  is_eq = is_eq && is_all_equal(x.h_norm, y.h_norm);
  is_eq = is_eq && is_all_equal(x.l_ref, y.l_ref);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_material_ARRAY&, const CPP_photon_material_ARRAY&);
template bool is_all_equal (const CPP_photon_material_MATRIX&, const CPP_photon_material_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_photon_element& x, const CPP_photon_element& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.surface == y.surface);
  is_eq = is_eq && (x.target == y.target);
  is_eq = is_eq && (x.material == y.material);
  return is_eq;
};

template bool is_all_equal (const CPP_photon_element_ARRAY&, const CPP_photon_element_ARRAY&);
template bool is_all_equal (const CPP_photon_element_MATRIX&, const CPP_photon_element_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wall3d_vertex& x, const CPP_wall3d_vertex& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.x == y.x);
  is_eq = is_eq && (x.y == y.y);
  is_eq = is_eq && (x.radius_x == y.radius_x);
  is_eq = is_eq && (x.radius_y == y.radius_y);
  is_eq = is_eq && (x.tilt == y.tilt);
  is_eq = is_eq && (x.angle == y.angle);
  is_eq = is_eq && (x.x0 == y.x0);
  is_eq = is_eq && (x.y0 == y.y0);
  is_eq = is_eq && (x.type == y.type);
  return is_eq;
};

template bool is_all_equal (const CPP_wall3d_vertex_ARRAY&, const CPP_wall3d_vertex_ARRAY&);
template bool is_all_equal (const CPP_wall3d_vertex_MATRIX&, const CPP_wall3d_vertex_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wall3d_section& x, const CPP_wall3d_section& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.material == y.material);
  is_eq = is_eq && is_all_equal(x.v, y.v);
  is_eq = is_eq && ((x.surface == NULL) == (y.surface == NULL));
  if (!is_eq) return false;
  if (x.surface != NULL) is_eq = (*x.surface == *y.surface);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && (x.n_vertex_input == y.n_vertex_input);
  is_eq = is_eq && (x.ix_ele == y.ix_ele);
  is_eq = is_eq && (x.ix_branch == y.ix_branch);
  is_eq = is_eq && (x.patch_in_region == y.patch_in_region);
  is_eq = is_eq && (x.absolute_vertices_input == y.absolute_vertices_input);
  is_eq = is_eq && (x.thickness == y.thickness);
  is_eq = is_eq && (x.s == y.s);
  is_eq = is_eq && is_all_equal(x.r0, y.r0);
  is_eq = is_eq && (x.dx0_ds == y.dx0_ds);
  is_eq = is_eq && (x.dy0_ds == y.dy0_ds);
  is_eq = is_eq && is_all_equal(x.x0_coef, y.x0_coef);
  is_eq = is_eq && is_all_equal(x.y0_coef, y.y0_coef);
  is_eq = is_eq && (x.dr_ds == y.dr_ds);
  is_eq = is_eq && is_all_equal(x.p1_coef, y.p1_coef);
  is_eq = is_eq && is_all_equal(x.p2_coef, y.p2_coef);
  return is_eq;
};

template bool is_all_equal (const CPP_wall3d_section_ARRAY&, const CPP_wall3d_section_ARRAY&);
template bool is_all_equal (const CPP_wall3d_section_MATRIX&, const CPP_wall3d_section_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_wall3d& x, const CPP_wall3d& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && (x.ix_wall3d == y.ix_wall3d);
  is_eq = is_eq && (x.n_link == y.n_link);
  is_eq = is_eq && (x.thickness == y.thickness);
  is_eq = is_eq && (x.clear_material == y.clear_material);
  is_eq = is_eq && (x.opaque_material == y.opaque_material);
  is_eq = is_eq && (x.superimpose == y.superimpose);
  is_eq = is_eq && (x.ele_anchor_pt == y.ele_anchor_pt);
  is_eq = is_eq && is_all_equal(x.section, y.section);
  return is_eq;
};

template bool is_all_equal (const CPP_wall3d_ARRAY&, const CPP_wall3d_ARRAY&);
template bool is_all_equal (const CPP_wall3d_MATRIX&, const CPP_wall3d_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_control& x, const CPP_control& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.stack, y.stack);
  is_eq = is_eq && (x.slave == y.slave);
  is_eq = is_eq && (x.lord == y.lord);
  is_eq = is_eq && (x.ix_attrib == y.ix_attrib);
  return is_eq;
};

template bool is_all_equal (const CPP_control_ARRAY&, const CPP_control_ARRAY&);
template bool is_all_equal (const CPP_control_MATRIX&, const CPP_control_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_ellipse_beam_init& x, const CPP_ellipse_beam_init& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.part_per_ellipse == y.part_per_ellipse);
  is_eq = is_eq && (x.n_ellipse == y.n_ellipse);
  is_eq = is_eq && (x.sigma_cutoff == y.sigma_cutoff);
  return is_eq;
};

template bool is_all_equal (const CPP_ellipse_beam_init_ARRAY&, const CPP_ellipse_beam_init_ARRAY&);
template bool is_all_equal (const CPP_ellipse_beam_init_MATRIX&, const CPP_ellipse_beam_init_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_kv_beam_init& x, const CPP_kv_beam_init& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.part_per_phi, y.part_per_phi);
  is_eq = is_eq && (x.n_i2 == y.n_i2);
  is_eq = is_eq && (x.a == y.a);
  return is_eq;
};

template bool is_all_equal (const CPP_kv_beam_init_ARRAY&, const CPP_kv_beam_init_ARRAY&);
template bool is_all_equal (const CPP_kv_beam_init_MATRIX&, const CPP_kv_beam_init_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_grid_beam_init& x, const CPP_grid_beam_init& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.n_x == y.n_x);
  is_eq = is_eq && (x.n_px == y.n_px);
  is_eq = is_eq && (x.x_min == y.x_min);
  is_eq = is_eq && (x.x_max == y.x_max);
  is_eq = is_eq && (x.px_min == y.px_min);
  is_eq = is_eq && (x.px_max == y.px_max);
  return is_eq;
};

template bool is_all_equal (const CPP_grid_beam_init_ARRAY&, const CPP_grid_beam_init_ARRAY&);
template bool is_all_equal (const CPP_grid_beam_init_MATRIX&, const CPP_grid_beam_init_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_beam_init& x, const CPP_beam_init& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.file_name == y.file_name);
  is_eq = is_eq && is_all_equal(x.distribution_type, y.distribution_type);
  is_eq = is_eq && (x.spin == y.spin);
  is_eq = is_eq && is_all_equal(x.ellipse, y.ellipse);
  is_eq = is_eq && (x.kv == y.kv);
  is_eq = is_eq && is_all_equal(x.grid, y.grid);
  is_eq = is_eq && is_all_equal(x.center_jitter, y.center_jitter);
  is_eq = is_eq && is_all_equal(x.emit_jitter, y.emit_jitter);
  is_eq = is_eq && (x.sig_z_jitter == y.sig_z_jitter);
  is_eq = is_eq && (x.sig_e_jitter == y.sig_e_jitter);
  is_eq = is_eq && (x.n_particle == y.n_particle);
  is_eq = is_eq && (x.renorm_center == y.renorm_center);
  is_eq = is_eq && (x.renorm_sigma == y.renorm_sigma);
  is_eq = is_eq && (x.random_engine == y.random_engine);
  is_eq = is_eq && (x.random_gauss_converter == y.random_gauss_converter);
  is_eq = is_eq && (x.random_sigma_cutoff == y.random_sigma_cutoff);
  is_eq = is_eq && (x.a_norm_emit == y.a_norm_emit);
  is_eq = is_eq && (x.b_norm_emit == y.b_norm_emit);
  is_eq = is_eq && (x.a_emit == y.a_emit);
  is_eq = is_eq && (x.b_emit == y.b_emit);
  is_eq = is_eq && (x.dpz_dz == y.dpz_dz);
  is_eq = is_eq && is_all_equal(x.center, y.center);
  is_eq = is_eq && (x.dt_bunch == y.dt_bunch);
  is_eq = is_eq && (x.sig_z == y.sig_z);
  is_eq = is_eq && (x.sig_e == y.sig_e);
  is_eq = is_eq && (x.bunch_charge == y.bunch_charge);
  is_eq = is_eq && (x.n_bunch == y.n_bunch);
  is_eq = is_eq && (x.species == y.species);
  is_eq = is_eq && (x.init_spin == y.init_spin);
  is_eq = is_eq && (x.full_6d_coupling_calc == y.full_6d_coupling_calc);
  is_eq = is_eq && (x.use_lattice_center == y.use_lattice_center);
  is_eq = is_eq && (x.use_t_coords == y.use_t_coords);
  is_eq = is_eq && (x.use_z_as_t == y.use_z_as_t);
  return is_eq;
};

template bool is_all_equal (const CPP_beam_init_ARRAY&, const CPP_beam_init_ARRAY&);
template bool is_all_equal (const CPP_beam_init_MATRIX&, const CPP_beam_init_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_lat_param& x, const CPP_lat_param& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.n_part == y.n_part);
  is_eq = is_eq && (x.total_length == y.total_length);
  is_eq = is_eq && (x.unstable_factor == y.unstable_factor);
  is_eq = is_eq && is_all_equal(x.t1_with_rf, y.t1_with_rf);
  is_eq = is_eq && is_all_equal(x.t1_no_rf, y.t1_no_rf);
  is_eq = is_eq && (x.spin_tune == y.spin_tune);
  is_eq = is_eq && (x.particle == y.particle);
  is_eq = is_eq && (x.default_tracking_species == y.default_tracking_species);
  is_eq = is_eq && (x.geometry == y.geometry);
  is_eq = is_eq && (x.ixx == y.ixx);
  is_eq = is_eq && (x.stable == y.stable);
  is_eq = is_eq && (x.live_branch == y.live_branch);
  is_eq = is_eq && (x.backwards_time_tracking == y.backwards_time_tracking);
  is_eq = is_eq && (x.bookkeeping_state == y.bookkeeping_state);
  is_eq = is_eq && (x.beam_init == y.beam_init);
  return is_eq;
};

template bool is_all_equal (const CPP_lat_param_ARRAY&, const CPP_lat_param_ARRAY&);
template bool is_all_equal (const CPP_lat_param_MATRIX&, const CPP_lat_param_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_mode_info& x, const CPP_mode_info& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.tune == y.tune);
  is_eq = is_eq && (x.emit == y.emit);
  is_eq = is_eq && (x.chrom == y.chrom);
  is_eq = is_eq && (x.sigma == y.sigma);
  is_eq = is_eq && (x.sigmap == y.sigmap);
  return is_eq;
};

template bool is_all_equal (const CPP_mode_info_ARRAY&, const CPP_mode_info_ARRAY&);
template bool is_all_equal (const CPP_mode_info_MATRIX&, const CPP_mode_info_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_pre_tracker& x, const CPP_pre_tracker& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.who == y.who);
  is_eq = is_eq && (x.ix_ele_start == y.ix_ele_start);
  is_eq = is_eq && (x.ix_ele_end == y.ix_ele_end);
  is_eq = is_eq && (x.input_file == y.input_file);
  return is_eq;
};

template bool is_all_equal (const CPP_pre_tracker_ARRAY&, const CPP_pre_tracker_ARRAY&);
template bool is_all_equal (const CPP_pre_tracker_MATRIX&, const CPP_pre_tracker_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_anormal_mode& x, const CPP_anormal_mode& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.emittance == y.emittance);
  is_eq = is_eq && is_all_equal(x.synch_int, y.synch_int);
  is_eq = is_eq && (x.j_damp == y.j_damp);
  is_eq = is_eq && (x.alpha_damp == y.alpha_damp);
  is_eq = is_eq && (x.chrom == y.chrom);
  is_eq = is_eq && (x.tune == y.tune);
  return is_eq;
};

template bool is_all_equal (const CPP_anormal_mode_ARRAY&, const CPP_anormal_mode_ARRAY&);
template bool is_all_equal (const CPP_anormal_mode_MATRIX&, const CPP_anormal_mode_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_linac_normal_mode& x, const CPP_linac_normal_mode& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.i2_e4 == y.i2_e4);
  is_eq = is_eq && (x.i3_e7 == y.i3_e7);
  is_eq = is_eq && (x.i5a_e6 == y.i5a_e6);
  is_eq = is_eq && (x.i5b_e6 == y.i5b_e6);
  is_eq = is_eq && (x.sig_e1 == y.sig_e1);
  is_eq = is_eq && (x.a_emittance_end == y.a_emittance_end);
  is_eq = is_eq && (x.b_emittance_end == y.b_emittance_end);
  return is_eq;
};

template bool is_all_equal (const CPP_linac_normal_mode_ARRAY&, const CPP_linac_normal_mode_ARRAY&);
template bool is_all_equal (const CPP_linac_normal_mode_MATRIX&, const CPP_linac_normal_mode_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_normal_modes& x, const CPP_normal_modes& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.synch_int, y.synch_int);
  is_eq = is_eq && (x.sige_e == y.sige_e);
  is_eq = is_eq && (x.sig_z == y.sig_z);
  is_eq = is_eq && (x.e_loss == y.e_loss);
  is_eq = is_eq && (x.rf_voltage == y.rf_voltage);
  is_eq = is_eq && (x.pz_aperture == y.pz_aperture);
  is_eq = is_eq && (x.a == y.a);
  is_eq = is_eq && (x.b == y.b);
  is_eq = is_eq && (x.z == y.z);
  is_eq = is_eq && (x.lin == y.lin);
  return is_eq;
};

template bool is_all_equal (const CPP_normal_modes_ARRAY&, const CPP_normal_modes_ARRAY&);
template bool is_all_equal (const CPP_normal_modes_MATRIX&, const CPP_normal_modes_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_em_field& x, const CPP_em_field& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.e, y.e);
  is_eq = is_eq && is_all_equal(x.b, y.b);
  is_eq = is_eq && is_all_equal(x.de, y.de);
  is_eq = is_eq && is_all_equal(x.db, y.db);
  return is_eq;
};

template bool is_all_equal (const CPP_em_field_ARRAY&, const CPP_em_field_ARRAY&);
template bool is_all_equal (const CPP_em_field_MATRIX&, const CPP_em_field_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_track_map& x, const CPP_track_map& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.vec0, y.vec0);
  is_eq = is_eq && is_all_equal(x.mat6, y.mat6);
  return is_eq;
};

template bool is_all_equal (const CPP_track_map_ARRAY&, const CPP_track_map_ARRAY&);
template bool is_all_equal (const CPP_track_map_MATRIX&, const CPP_track_map_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_track& x, const CPP_track& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.orb, y.orb);
  is_eq = is_eq && is_all_equal(x.field, y.field);
  is_eq = is_eq && is_all_equal(x.map, y.map);
  is_eq = is_eq && (x.ds_save == y.ds_save);
  is_eq = is_eq && (x.n_pt == y.n_pt);
  is_eq = is_eq && (x.n_bad == y.n_bad);
  is_eq = is_eq && (x.n_ok == y.n_ok);
  return is_eq;
};

template bool is_all_equal (const CPP_track_ARRAY&, const CPP_track_ARRAY&);
template bool is_all_equal (const CPP_track_MATRIX&, const CPP_track_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_synch_rad_common& x, const CPP_synch_rad_common& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.scale == y.scale);
  is_eq = is_eq && (x.i2 == y.i2);
  is_eq = is_eq && (x.i3 == y.i3);
  is_eq = is_eq && (x.i5a == y.i5a);
  is_eq = is_eq && (x.i5b == y.i5b);
  is_eq = is_eq && (x.i_calc_on == y.i_calc_on);
  return is_eq;
};

template bool is_all_equal (const CPP_synch_rad_common_ARRAY&, const CPP_synch_rad_common_ARRAY&);
template bool is_all_equal (const CPP_synch_rad_common_MATRIX&, const CPP_synch_rad_common_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_csr_parameter& x, const CPP_csr_parameter& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ds_track_step == y.ds_track_step);
  is_eq = is_eq && (x.beam_chamber_height == y.beam_chamber_height);
  is_eq = is_eq && (x.sigma_cutoff == y.sigma_cutoff);
  is_eq = is_eq && (x.n_bin == y.n_bin);
  is_eq = is_eq && (x.particle_bin_span == y.particle_bin_span);
  is_eq = is_eq && (x.n_shield_images == y.n_shield_images);
  is_eq = is_eq && (x.ix1_ele_csr == y.ix1_ele_csr);
  is_eq = is_eq && (x.ix2_ele_csr == y.ix2_ele_csr);
  is_eq = is_eq && (x.sc_min_in_bin == y.sc_min_in_bin);
  is_eq = is_eq && (x.lcsr_component_on == y.lcsr_component_on);
  is_eq = is_eq && (x.lsc_component_on == y.lsc_component_on);
  is_eq = is_eq && (x.tsc_component_on == y.tsc_component_on);
  is_eq = is_eq && (x.lsc_kick_transverse_dependence == y.lsc_kick_transverse_dependence);
  is_eq = is_eq && (x.print_taylor_warning == y.print_taylor_warning);
  is_eq = is_eq && (x.use_csr_old == y.use_csr_old);
  is_eq = is_eq && (x.small_angle_approx == y.small_angle_approx);
  is_eq = is_eq && (x.write_csr_wake == y.write_csr_wake);
  return is_eq;
};

template bool is_all_equal (const CPP_csr_parameter_ARRAY&, const CPP_csr_parameter_ARRAY&);
template bool is_all_equal (const CPP_csr_parameter_MATRIX&, const CPP_csr_parameter_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_bmad_common& x, const CPP_bmad_common& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.max_aperture_limit == y.max_aperture_limit);
  is_eq = is_eq && is_all_equal(x.d_orb, y.d_orb);
  is_eq = is_eq && (x.default_ds_step == y.default_ds_step);
  is_eq = is_eq && (x.significant_length == y.significant_length);
  is_eq = is_eq && (x.rel_tol_tracking == y.rel_tol_tracking);
  is_eq = is_eq && (x.abs_tol_tracking == y.abs_tol_tracking);
  is_eq = is_eq && (x.rel_tol_adaptive_tracking == y.rel_tol_adaptive_tracking);
  is_eq = is_eq && (x.abs_tol_adaptive_tracking == y.abs_tol_adaptive_tracking);
  is_eq = is_eq && (x.init_ds_adaptive_tracking == y.init_ds_adaptive_tracking);
  is_eq = is_eq && (x.min_ds_adaptive_tracking == y.min_ds_adaptive_tracking);
  is_eq = is_eq && (x.fatal_ds_adaptive_tracking == y.fatal_ds_adaptive_tracking);
  is_eq = is_eq && (x.electric_dipole_moment == y.electric_dipole_moment);
  is_eq = is_eq && (x.ptc_cut_factor == y.ptc_cut_factor);
  is_eq = is_eq && (x.sad_eps_scale == y.sad_eps_scale);
  is_eq = is_eq && (x.sad_amp_max == y.sad_amp_max);
  is_eq = is_eq && (x.sad_n_div_max == y.sad_n_div_max);
  is_eq = is_eq && (x.taylor_order == y.taylor_order);
  is_eq = is_eq && (x.runge_kutta_order == y.runge_kutta_order);
  is_eq = is_eq && (x.default_integ_order == y.default_integ_order);
  is_eq = is_eq && (x.ptc_max_fringe_order == y.ptc_max_fringe_order);
  is_eq = is_eq && (x.max_num_runge_kutta_step == y.max_num_runge_kutta_step);
  is_eq = is_eq && (x.use_hard_edge_drifts == y.use_hard_edge_drifts);
  is_eq = is_eq && (x.sr_wakes_on == y.sr_wakes_on);
  is_eq = is_eq && (x.lr_wakes_on == y.lr_wakes_on);
  is_eq = is_eq && (x.mat6_track_symmetric == y.mat6_track_symmetric);
  is_eq = is_eq && (x.auto_bookkeeper == y.auto_bookkeeper);
  is_eq = is_eq && (x.space_charge_on == y.space_charge_on);
  is_eq = is_eq && (x.coherent_synch_rad_on == y.coherent_synch_rad_on);
  is_eq = is_eq && (x.spin_tracking_on == y.spin_tracking_on);
  is_eq = is_eq && (x.radiation_damping_on == y.radiation_damping_on);
  is_eq = is_eq && (x.radiation_fluctuations_on == y.radiation_fluctuations_on);
  is_eq = is_eq && (x.conserve_taylor_maps == y.conserve_taylor_maps);
  is_eq = is_eq && (x.absolute_time_tracking_default == y.absolute_time_tracking_default);
  is_eq = is_eq && (x.convert_to_kinetic_momentum == y.convert_to_kinetic_momentum);
  is_eq = is_eq && (x.aperture_limit_on == y.aperture_limit_on);
  is_eq = is_eq && (x.debug == y.debug);
  return is_eq;
};

template bool is_all_equal (const CPP_bmad_common_ARRAY&, const CPP_bmad_common_ARRAY&);
template bool is_all_equal (const CPP_bmad_common_MATRIX&, const CPP_bmad_common_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_rad_int1& x, const CPP_rad_int1& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.i0 == y.i0);
  is_eq = is_eq && (x.i1 == y.i1);
  is_eq = is_eq && (x.i2 == y.i2);
  is_eq = is_eq && (x.i3 == y.i3);
  is_eq = is_eq && (x.i4a == y.i4a);
  is_eq = is_eq && (x.i4b == y.i4b);
  is_eq = is_eq && (x.i4z == y.i4z);
  is_eq = is_eq && (x.i5a == y.i5a);
  is_eq = is_eq && (x.i5b == y.i5b);
  is_eq = is_eq && (x.i6b == y.i6b);
  is_eq = is_eq && (x.lin_i2_e4 == y.lin_i2_e4);
  is_eq = is_eq && (x.lin_i3_e7 == y.lin_i3_e7);
  is_eq = is_eq && (x.lin_i5a_e6 == y.lin_i5a_e6);
  is_eq = is_eq && (x.lin_i5b_e6 == y.lin_i5b_e6);
  is_eq = is_eq && (x.lin_norm_emit_a == y.lin_norm_emit_a);
  is_eq = is_eq && (x.lin_norm_emit_b == y.lin_norm_emit_b);
  is_eq = is_eq && (x.n_steps == y.n_steps);
  return is_eq;
};

template bool is_all_equal (const CPP_rad_int1_ARRAY&, const CPP_rad_int1_ARRAY&);
template bool is_all_equal (const CPP_rad_int1_MATRIX&, const CPP_rad_int1_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_rad_int_all_ele& x, const CPP_rad_int_all_ele& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.ele, y.ele);
  return is_eq;
};

template bool is_all_equal (const CPP_rad_int_all_ele_ARRAY&, const CPP_rad_int_all_ele_ARRAY&);
template bool is_all_equal (const CPP_rad_int_all_ele_MATRIX&, const CPP_rad_int_all_ele_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_ele& x, const CPP_ele& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.type == y.type);
  is_eq = is_eq && (x.alias == y.alias);
  is_eq = is_eq && (x.component_name == y.component_name);
  is_eq = is_eq && ((x.descrip == NULL) == (y.descrip == NULL));
  if (!is_eq) return false;
  if (x.descrip != NULL) is_eq = (*x.descrip == *y.descrip);
  is_eq = is_eq && (x.a == y.a);
  is_eq = is_eq && (x.b == y.b);
  is_eq = is_eq && (x.z == y.z);
  is_eq = is_eq && (x.x == y.x);
  is_eq = is_eq && (x.y == y.y);
  is_eq = is_eq && ((x.ac_kick == NULL) == (y.ac_kick == NULL));
  if (!is_eq) return false;
  if (x.ac_kick != NULL) is_eq = (*x.ac_kick == *y.ac_kick);
  is_eq = is_eq && (x.bookkeeping_state == y.bookkeeping_state);
  is_eq = is_eq && is_all_equal(x.control_var, y.control_var);
  is_eq = is_eq && is_all_equal(x.cartesian_map, y.cartesian_map);
  is_eq = is_eq && is_all_equal(x.cylindrical_map, y.cylindrical_map);
  is_eq = is_eq && is_all_equal(x.taylor_field, y.taylor_field);
  is_eq = is_eq && is_all_equal(x.grid_field, y.grid_field);
  is_eq = is_eq && (x.floor == y.floor);
  is_eq = is_eq && ((x.mode3 == NULL) == (y.mode3 == NULL));
  if (!is_eq) return false;
  if (x.mode3 != NULL) is_eq = (*x.mode3 == *y.mode3);
  is_eq = is_eq && ((x.photon == NULL) == (y.photon == NULL));
  if (!is_eq) return false;
  if (x.photon != NULL) is_eq = (*x.photon == *y.photon);
  is_eq = is_eq && ((x.rad_int_cache == NULL) == (y.rad_int_cache == NULL));
  if (!is_eq) return false;
  if (x.rad_int_cache != NULL) is_eq = (*x.rad_int_cache == *y.rad_int_cache);
  is_eq = is_eq && ((x.space_charge == NULL) == (y.space_charge == NULL));
  if (!is_eq) return false;
  if (x.space_charge != NULL) is_eq = (*x.space_charge == *y.space_charge);
  is_eq = is_eq && is_all_equal(x.taylor, y.taylor);
  is_eq = is_eq && is_all_equal(x.spin_taylor, y.spin_taylor);
  is_eq = is_eq && ((x.wake == NULL) == (y.wake == NULL));
  if (!is_eq) return false;
  if (x.wake != NULL) is_eq = (*x.wake == *y.wake);
  is_eq = is_eq && is_all_equal(x.wall3d, y.wall3d);
  is_eq = is_eq && (x.map_ref_orb_in == y.map_ref_orb_in);
  is_eq = is_eq && (x.map_ref_orb_out == y.map_ref_orb_out);
  is_eq = is_eq && (x.time_ref_orb_in == y.time_ref_orb_in);
  is_eq = is_eq && (x.time_ref_orb_out == y.time_ref_orb_out);
  is_eq = is_eq && is_all_equal(x.value, y.value);
  is_eq = is_eq && is_all_equal(x.old_value, y.old_value);
  is_eq = is_eq && is_all_equal(x.vec0, y.vec0);
  is_eq = is_eq && is_all_equal(x.mat6, y.mat6);
  is_eq = is_eq && is_all_equal(x.c_mat, y.c_mat);
  is_eq = is_eq && (x.gamma_c == y.gamma_c);
  is_eq = is_eq && (x.s_start == y.s_start);
  is_eq = is_eq && (x.s == y.s);
  is_eq = is_eq && (x.ref_time == y.ref_time);
  is_eq = is_eq && is_all_equal(x.r, y.r);
  is_eq = is_eq && is_all_equal(x.a_pole, y.a_pole);
  is_eq = is_eq && is_all_equal(x.b_pole, y.b_pole);
  is_eq = is_eq && is_all_equal(x.a_pole_elec, y.a_pole_elec);
  is_eq = is_eq && is_all_equal(x.b_pole_elec, y.b_pole_elec);
  is_eq = is_eq && (x.key == y.key);
  is_eq = is_eq && (x.sub_key == y.sub_key);
  is_eq = is_eq && (x.ix_ele == y.ix_ele);
  is_eq = is_eq && (x.ix_branch == y.ix_branch);
  is_eq = is_eq && (x.lord_status == y.lord_status);
  is_eq = is_eq && (x.n_slave == y.n_slave);
  is_eq = is_eq && (x.n_slave_field == y.n_slave_field);
  is_eq = is_eq && (x.ix1_slave == y.ix1_slave);
  is_eq = is_eq && (x.slave_status == y.slave_status);
  is_eq = is_eq && (x.n_lord == y.n_lord);
  is_eq = is_eq && (x.n_lord_field == y.n_lord_field);
  is_eq = is_eq && (x.ic1_lord == y.ic1_lord);
  is_eq = is_eq && (x.ix_pointer == y.ix_pointer);
  is_eq = is_eq && (x.ixx == y.ixx);
  is_eq = is_eq && (x.iyy == y.iyy);
  is_eq = is_eq && (x.mat6_calc_method == y.mat6_calc_method);
  is_eq = is_eq && (x.tracking_method == y.tracking_method);
  is_eq = is_eq && (x.spin_tracking_method == y.spin_tracking_method);
  is_eq = is_eq && (x.ptc_integration_type == y.ptc_integration_type);
  is_eq = is_eq && (x.field_calc == y.field_calc);
  is_eq = is_eq && (x.aperture_at == y.aperture_at);
  is_eq = is_eq && (x.aperture_type == y.aperture_type);
  is_eq = is_eq && (x.orientation == y.orientation);
  is_eq = is_eq && (x.symplectify == y.symplectify);
  is_eq = is_eq && (x.mode_flip == y.mode_flip);
  is_eq = is_eq && (x.multipoles_on == y.multipoles_on);
  is_eq = is_eq && (x.scale_multipoles == y.scale_multipoles);
  is_eq = is_eq && (x.taylor_map_includes_offsets == y.taylor_map_includes_offsets);
  is_eq = is_eq && (x.field_master == y.field_master);
  is_eq = is_eq && (x.is_on == y.is_on);
  is_eq = is_eq && (x.logic == y.logic);
  is_eq = is_eq && (x.bmad_logic == y.bmad_logic);
  is_eq = is_eq && (x.select == y.select);
  is_eq = is_eq && (x.csr_calc_on == y.csr_calc_on);
  is_eq = is_eq && (x.offset_moves_aperture == y.offset_moves_aperture);
  return is_eq;
};

template bool is_all_equal (const CPP_ele_ARRAY&, const CPP_ele_ARRAY&);
template bool is_all_equal (const CPP_ele_MATRIX&, const CPP_ele_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_complex_taylor_term& x, const CPP_complex_taylor_term& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.coef == y.coef);
  is_eq = is_eq && is_all_equal(x.expn, y.expn);
  return is_eq;
};

template bool is_all_equal (const CPP_complex_taylor_term_ARRAY&, const CPP_complex_taylor_term_ARRAY&);
template bool is_all_equal (const CPP_complex_taylor_term_MATRIX&, const CPP_complex_taylor_term_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_complex_taylor& x, const CPP_complex_taylor& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.ref == y.ref);
  is_eq = is_eq && is_all_equal(x.term, y.term);
  return is_eq;
};

template bool is_all_equal (const CPP_complex_taylor_ARRAY&, const CPP_complex_taylor_ARRAY&);
template bool is_all_equal (const CPP_complex_taylor_MATRIX&, const CPP_complex_taylor_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_normal_form& x, const CPP_normal_form& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.m, y.m);
  is_eq = is_eq && is_all_equal(x.a, y.a);
  is_eq = is_eq && is_all_equal(x.a_inv, y.a_inv);
  is_eq = is_eq && is_all_equal(x.dhdj, y.dhdj);
  is_eq = is_eq && is_all_equal(x.f, y.f);
  is_eq = is_eq && is_all_equal(x.l, y.l);
  is_eq = is_eq && ((x.ele_origin == NULL) == (y.ele_origin == NULL));
  if (!is_eq) return false;
  if (x.ele_origin != NULL) is_eq = (*x.ele_origin == *y.ele_origin);
  return is_eq;
};

template bool is_all_equal (const CPP_normal_form_ARRAY&, const CPP_normal_form_ARRAY&);
template bool is_all_equal (const CPP_normal_form_MATRIX&, const CPP_normal_form_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_branch& x, const CPP_branch& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.name == y.name);
  is_eq = is_eq && (x.ix_branch == y.ix_branch);
  is_eq = is_eq && (x.ix_from_branch == y.ix_from_branch);
  is_eq = is_eq && (x.ix_from_ele == y.ix_from_ele);
  is_eq = is_eq && ((x.n_ele_track == NULL) == (y.n_ele_track == NULL));
  if (!is_eq) return false;
  if (x.n_ele_track != NULL) is_eq = (*x.n_ele_track == *y.n_ele_track);
  is_eq = is_eq && ((x.n_ele_max == NULL) == (y.n_ele_max == NULL));
  if (!is_eq) return false;
  if (x.n_ele_max != NULL) is_eq = (*x.n_ele_max == *y.n_ele_max);
  is_eq = is_eq && ((x.a == NULL) == (y.a == NULL));
  if (!is_eq) return false;
  if (x.a != NULL) is_eq = (*x.a == *y.a);
  is_eq = is_eq && ((x.b == NULL) == (y.b == NULL));
  if (!is_eq) return false;
  if (x.b != NULL) is_eq = (*x.b == *y.b);
  is_eq = is_eq && ((x.z == NULL) == (y.z == NULL));
  if (!is_eq) return false;
  if (x.z != NULL) is_eq = (*x.z == *y.z);
  is_eq = is_eq && is_all_equal(x.ele, y.ele);
  is_eq = is_eq && ((x.param == NULL) == (y.param == NULL));
  if (!is_eq) return false;
  if (x.param != NULL) is_eq = (*x.param == *y.param);
  is_eq = is_eq && is_all_equal(x.wall3d, y.wall3d);
  is_eq = is_eq && (x.normal_form_with_rf == y.normal_form_with_rf);
  is_eq = is_eq && (x.normal_form_no_rf == y.normal_form_no_rf);
  return is_eq;
};

template bool is_all_equal (const CPP_branch_ARRAY&, const CPP_branch_ARRAY&);
template bool is_all_equal (const CPP_branch_MATRIX&, const CPP_branch_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_lat& x, const CPP_lat& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.use_name == y.use_name);
  is_eq = is_eq && (x.lattice == y.lattice);
  is_eq = is_eq && (x.input_file_name == y.input_file_name);
  is_eq = is_eq && (x.title == y.title);
  is_eq = is_eq && is_all_equal(x.attribute_alias, y.attribute_alias);
  is_eq = is_eq && (x.a == y.a);
  is_eq = is_eq && (x.b == y.b);
  is_eq = is_eq && (x.z == y.z);
  is_eq = is_eq && (x.param == y.param);
  is_eq = is_eq && (x.lord_state == y.lord_state);
  is_eq = is_eq && (x.ele_init == y.ele_init);
  is_eq = is_eq && is_all_equal(x.ele, y.ele);
  is_eq = is_eq && is_all_equal(x.branch, y.branch);
  is_eq = is_eq && is_all_equal(x.control, y.control);
  is_eq = is_eq && is_all_equal(x.surface, y.surface);
  is_eq = is_eq && (x.beam_start == y.beam_start);
  is_eq = is_eq && (x.pre_tracker == y.pre_tracker);
  is_eq = is_eq && (x.version == y.version);
  is_eq = is_eq && (x.n_ele_track == y.n_ele_track);
  is_eq = is_eq && (x.n_ele_max == y.n_ele_max);
  is_eq = is_eq && (x.n_control_max == y.n_control_max);
  is_eq = is_eq && (x.n_ic_max == y.n_ic_max);
  is_eq = is_eq && (x.input_taylor_order == y.input_taylor_order);
  is_eq = is_eq && is_all_equal(x.ic, y.ic);
  is_eq = is_eq && (x.photon_type == y.photon_type);
  is_eq = is_eq && (x.absolute_time_tracking == y.absolute_time_tracking);
  is_eq = is_eq && (x.ptc_uses_hard_edge_drifts == y.ptc_uses_hard_edge_drifts);
  return is_eq;
};

template bool is_all_equal (const CPP_lat_ARRAY&, const CPP_lat_ARRAY&);
template bool is_all_equal (const CPP_lat_MATRIX&, const CPP_lat_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_bunch& x, const CPP_bunch& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.particle, y.particle);
  is_eq = is_eq && is_all_equal(x.ix_z, y.ix_z);
  is_eq = is_eq && (x.charge_tot == y.charge_tot);
  is_eq = is_eq && (x.charge_live == y.charge_live);
  is_eq = is_eq && (x.z_center == y.z_center);
  is_eq = is_eq && (x.t_center == y.t_center);
  is_eq = is_eq && (x.ix_ele == y.ix_ele);
  is_eq = is_eq && (x.ix_bunch == y.ix_bunch);
  is_eq = is_eq && (x.n_live == y.n_live);
  return is_eq;
};

template bool is_all_equal (const CPP_bunch_ARRAY&, const CPP_bunch_ARRAY&);
template bool is_all_equal (const CPP_bunch_MATRIX&, const CPP_bunch_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_bunch_params& x, const CPP_bunch_params& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.x == y.x);
  is_eq = is_eq && (x.y == y.y);
  is_eq = is_eq && (x.z == y.z);
  is_eq = is_eq && (x.a == y.a);
  is_eq = is_eq && (x.b == y.b);
  is_eq = is_eq && (x.c == y.c);
  is_eq = is_eq && (x.centroid == y.centroid);
  is_eq = is_eq && (x.spin == y.spin);
  is_eq = is_eq && is_all_equal(x.sigma, y.sigma);
  is_eq = is_eq && is_all_equal(x.rel_max, y.rel_max);
  is_eq = is_eq && is_all_equal(x.rel_min, y.rel_min);
  is_eq = is_eq && (x.s == y.s);
  is_eq = is_eq && (x.charge_live == y.charge_live);
  is_eq = is_eq && (x.n_particle_tot == y.n_particle_tot);
  is_eq = is_eq && (x.n_particle_live == y.n_particle_live);
  is_eq = is_eq && (x.n_particle_lost_in_ele == y.n_particle_lost_in_ele);
  return is_eq;
};

template bool is_all_equal (const CPP_bunch_params_ARRAY&, const CPP_bunch_params_ARRAY&);
template bool is_all_equal (const CPP_bunch_params_MATRIX&, const CPP_bunch_params_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_beam& x, const CPP_beam& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.bunch, y.bunch);
  return is_eq;
};

template bool is_all_equal (const CPP_beam_ARRAY&, const CPP_beam_ARRAY&);
template bool is_all_equal (const CPP_beam_MATRIX&, const CPP_beam_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_aperture_data& x, const CPP_aperture_data& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.x == y.x);
  is_eq = is_eq && (x.y == y.y);
  is_eq = is_eq && (x.plane == y.plane);
  is_eq = is_eq && (x.ix_lat == y.ix_lat);
  is_eq = is_eq && (x.i_turn == y.i_turn);
  return is_eq;
};

template bool is_all_equal (const CPP_aperture_data_ARRAY&, const CPP_aperture_data_ARRAY&);
template bool is_all_equal (const CPP_aperture_data_MATRIX&, const CPP_aperture_data_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_aperture_param& x, const CPP_aperture_param& y) {
  bool is_eq = true;
  is_eq = is_eq && (x.min_angle == y.min_angle);
  is_eq = is_eq && (x.max_angle == y.max_angle);
  is_eq = is_eq && (x.n_angle == y.n_angle);
  is_eq = is_eq && (x.n_turn == y.n_turn);
  is_eq = is_eq && (x.x_init == y.x_init);
  is_eq = is_eq && (x.y_init == y.y_init);
  is_eq = is_eq && (x.accuracy == y.accuracy);
  return is_eq;
};

template bool is_all_equal (const CPP_aperture_param_ARRAY&, const CPP_aperture_param_ARRAY&);
template bool is_all_equal (const CPP_aperture_param_MATRIX&, const CPP_aperture_param_MATRIX&);

//--------------------------------------------------------------

bool operator== (const CPP_aperture_scan& x, const CPP_aperture_scan& y) {
  bool is_eq = true;
  is_eq = is_eq && is_all_equal(x.aperture, y.aperture);
  is_eq = is_eq && (x.param == y.param);
  is_eq = is_eq && (x.ref_orb == y.ref_orb);
  return is_eq;
};

template bool is_all_equal (const CPP_aperture_scan_ARRAY&, const CPP_aperture_scan_ARRAY&);
template bool is_all_equal (const CPP_aperture_scan_MATRIX&, const CPP_aperture_scan_MATRIX&);
