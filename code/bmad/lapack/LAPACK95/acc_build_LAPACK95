#!/bin/bash

# Script to make the LAPACK95 libraries.
# Exit Codes found in /usr/include/sysexits.h

#set -x


# Function to configure, make and then install the Package - contains Package Specific build configuration

func_configure_make_install () {

    if [ ! -d ${BUILD_TYPE} ] ; then ln -s ../../${BUILD_TYPE} ${BUILD_TYPE} ; fi

    export OUTPUT_LIB_DIR="../../../"${BUILD_TYPE}"/lib"
    export OUTPUT_MOD_DIR="../../../"${BUILD_TYPE}"/modules"
    export LAPACK_PATH="../../.."
    export LAPACK95="../lapack95.a"
    export LAPACK77="../../lib/liblapack.a"
    export TMG77="../../lib/libtmglib.a"
    export BLAS="../../lib/libblas.a"
    export LIBS="${LAPACK95} ${TMG77} ${LAPACK77} ${BLAS}"
    export SUF="f90"
    export MODLIB="-I."
    export FC1="${FC}"
    export OPTS0="${FFLAGS}"
    export OPTS1="-c ${OPTS0}"
    export OPTS3="-c ${OPTS0} ${MODLIB}"
    export OPTL="${LDFLAGS} -o"

    [ "${FC}" == "ifort" ] && export FC="${FC} -free" && export FC1="${FC} -fixed"

    # Edit makefile in SRC directory not to remove library or .o files
    mv SRC/makefile SRC/makefile.orig
    sed -e '/rm -f f77_lapack.* f95_lapack.*/d' SRC/makefile.orig > SRC/makefile.1
    sed -e '/rm -f \*_lapack_single_double_complex_dcomplex.o/d' SRC/makefile.1 > SRC/makefile
    rm -f SRC/makefile.1

    func_print_compiler_linker_flags

    func_create_makeinc_lapack95_testing

    rm -f bin ; ln -s TESTING bin

    cd SRC

    ${GMAKE} single_double_complex_dcomplex

    export RETVAL=$?

    cd ..

    if [ ! -d ${OUTPUT_LIB_DIR} ] ; then mkdir -p ${OUTPUT_LIB_DIR} ; fi
    if [ ! -e ${OUTPUT_LIB_DIR}/liblapack95.a ] ; then cp lapack95.a ${OUTPUT_LIB_DIR}/liblapack95.a ; fi
    if [ ! -d ${OUTPUT_MOD_DIR} ] ; then mkdir -p ${OUTPUT_MOD_DIR} ; fi
    if [ ! -e ${OUTPUT_MOD_DIR}/f95_lapack.mod ] ; then cp lapack95_modules/* ${OUTPUT_MOD_DIR} ; fi
    
    if [ "${ARGUMENTS[1]}" == "-test" ] ; then 
	echo -e "\nBuilding tests for `echo ${PACKAGE_VERSION}`...\n"
        cd TESTING
        ${GMAKE} all
	export RETVAL=$?
	if [ "${RETVAL}" -eq 0 ] ; then
            cd ../
            python lapack95_testing.py -r
	fi
    fi

    cd ${OUTPUT_LIB_DIR}
    if ( [ ! -L lapack95.a ] && [ "${RETVAL}" -eq 0 ] ) ; then ln -s liblapack95.a lapack95.a ; fi

    if ( [ `uname` == "Darwin" ] && [ "${FC}" == "ifort" ] && [ "${RETVAL}" -eq 0 ] ) ; then ln -s /opt/intel/lib/* ${OUTPUT_DIR}/lib/ &> /dev/null 2>&1 ; fi

    unset OUTPUT_LIB_DIR
    unset OUTPUT_MOD_DIR
    unset LAPACK_PATH
    unset LAPACK95
    unset LAPACK77
    unset TMG77
    unset BLAS
    unset LIBS
    unset SUF
    unset MODLIB
    unset FC
    unset FC1
    unset OPTS0
    unset OPTS1
    unset OPTS3
    unset OPTL
}


# Function that contains Package Specific files and directories to be cleaned up

func_remove_package () {

    rm -rf ${BUILD_TYPE}
}


func_create_makeinc_lapack95_testing () {

# Create default make.inc file

cat <<\EOF > make.inc
#
#  -- LAPACK95 interface driver routine (version 2.0) --
#     UNI-C, Denmark; Univ. of Tennessee, USA; NAG Ltd., UK
#     August 5, 2000
#                                                                  
#  Modified for BMAD_DIST - A. De Falco - 27-Mar-2013
#
SHELL = /bin/bash
#
# -dcfuns  Enable recognition of non-standard double
#          precision  complex intrinsic functions
# -dusty   Allows the compilation and execution of "legacy"
#          software by downgrading the category  of  common
#          errors  found  in  such software from "Error" to
# -ieee=full enables all IEEE arithmetic facilities
#          including non-stop arithmetic.
#
#FC       = 
#FC1      = 
#OPTS0    = 
#MODLIB   = 
#OPTS1    = 
#OPTS3    =
#OPTL     = 
#OPTLIB   =

XX = 'rm' -f $@; \
        'rm' -f $@.res; \
	$(FC) $(OPTS0) -o $@ $(MODLIB) $@.$(SUF) $(OPTLIB) $(LIBS); \
        $@ < $@.dat > $@.res; \
        'rm' -f $@

YY = $(FC) $(OPTS0) -o $@ $(MODLIB) $@.$(SUF) $(OPTLIB) $(LIBS)

.SUFFIXES: .f90 .f .o

.$(SUF).o: 
	$(FC) $(OPTS3) $<

.f.o:
	$(FC1) $(OPTS3) $<
 
EOF

# Create default lapack95_testing.py file

cat <<\EOF > lapack95_testing.py
#! /usr/bin/env python
# -*- coding: utf-8 -*-


###############################################################################
# lapack95_testing.py
#
# Based on lapack_testing.py in main lapack distribution  
###############################################################################


from subprocess import Popen, STDOUT, PIPE 
import os, sys, math
import getopt
# Arguments
try:
   opts, args = getopt.getopt(sys.argv[1:], "hd:srep:t:n", 
                              ["help", "dir", "short", "run", "error","prec=","test=","number"])
   
except getopt.error, msg:
   print msg
   print "for help use --help"
   sys.exit(2)

short_summary=0
with_file=1
just_errors = 0
prec='x'
test='all'
only_numbers=0
dir="TESTING"
for o, a in opts:
   if o in ("-h", "--help"):
      print sys.argv[0]+" [-h|--help] [-d dir |--dir dir] [-s |--short] [-r |--run] [-e |--error] [-p p |--prec p] [-t test |--test test] [-n | --number]"
      print "     - h is to print this message"
      print "     - r is to use to run the LAPACK95 tests then analyse the output (.out files). By default, the script will not run all the LAPACK95 tests"
      print "     - d [dir] is to indicate where is the LAPACK95 testing directory (.out files). By default, the script will use ."
      print " LEVEL OF OUTPUT"
      print "     - x is to print a detailed summary"
      print "     - e is to print only the error summary"
      print "     - s is to print a short summary"
      print "     - n is to print the numbers of failing tests (turn on summary mode)"
      print " SECLECTION OF TESTS:"
      print "     - p [s/c/d/z/x] is to indicate the PRECISION to run:"
      print "            s=single"
      print "            d=double"
      print "            sd=single/double"
      print "            c=complex"
      print "            z=double complex"
      print "            cz=complex/double complex"
      print "            x=all [DEFAULT]"
      print "     - t [lin/eig/all] is to indicate which TEST FAMILY to run:"
      print "            lin=Linear Equation"
      print "            eig=Eigen Problems"
      print "            all=all tests [DEFAULT]"
      print " EXAMPLES:"
      print "     ./lapack_testing.py -n"
      print "            Will return the numbers of failed tests by analyzing the LAPACK95 output"
      print "     ./lapack_testing.py -n -r -p s"
      print "            Will return the numbers of failed tests in REAL precision by running the LAPACK95 Tests then analyzing the output"
      print "     ./lapack_testing.py -n -p s -t eig "
      print "            Will return the numbers of failed tests in REAL precision by analyzing only the LAPACK95 output of EIGEN testings"
      print "Written by Julie Langou (June 2011) "
      sys.exit(0)
   else:
      if o in ("-s", "--short"):
         short_summary = 1
      if o in ("-r", "--run"):
         with_file = 0
      if o in ("-e", "--error"):
         just_errors = 1
      if o in ( '-p', '--prec' ):
         prec = a
      if o in ( '-d', '--dir' ):
         dir = a
      if o in ( '-t', '--test' ):
         test = a
      if o in ( '-n', '--number' ):
         only_numbers = 1
         short_summary = 1

# process options
os.chdir(dir)
execution=1
summary="\n\t\t\t-->   LAPACK95 TESTING SUMMARY  <--\n";
if with_file: summary+= "\t\tProcessing LAPACK95 Testing output found in the "+dir+" direcory\n";
summary+="SUMMARY             \tnb test run \tnumerical error   \tother error  \n";
summary+="================   \t===========\t=================\t================  \n";
nb_of_test=0

# Add current directory to the path for subshells of this shell
# Allows the popen to find local files in both windows and unixes
os.environ["PATH"] = os.environ["PATH"]+":."

# Define a function to open the executable (different filenames on unix and Windows)
def run_summary_test( f, cmdline, short_summary):
   nb_test_run=0
   nb_test_fail=0
   nb_test_illegal=0
   nb_test_info=0
   if (with_file):
      if not os.path.exists(cmdline):
        error_message=cmdline+" file not found"
        r=1
        if short_summary: return [nb_test_run,nb_test_fail,nb_test_illegal,nb_test_info]
      else:
        pipe = open(cmdline,'r')
        r=0
   else:
      if os.name != 'nt':
         cmdline="./" + cmdline

      outfile=cmdline.split()[4]
      pipe = open(outfile,'w')
      p = Popen(cmdline, shell=True, stdout=pipe)
      p.wait()
      pipe.close()
      r=p.returncode
      pipe = open(outfile,'r')
      error_message=cmdline+" did not work"

   if r != 0 and not with_file:
       print "---- TESTING " + cmdline.split()[0] + "... FAILED(" + error_message +") !"
       for line in pipe.readlines():
          f.write(str(line))
   elif r != 0 and with_file and not short_summary:
       print "---- WARNING: please check that you have the LAPACK95 output : "+cmdline+"!"
       print "---- WARNING: with the option -r, we can run the LAPACK95 testing for you"
      # print "---- "+error_message
   else:
         for line in pipe.readlines():
        	f.write(str(line))
        	words_in_line=line.split()
        	if (line.find("run")!=-1):
#        	   print line
        	   whereisrun=words_in_line.index("run)")
        	   nb_test_run+=int(words_in_line[whereisrun-2])
        	if (line.find("out of")!=-1):
        	   if (short_summary==0): print line,
        	   whereisout= words_in_line.index("out")
        	   nb_test_fail+=int(words_in_line[whereisout-1])
        	if (line.find("illegal")!=-1):
        	   if (short_summary==0):print line,
        	   nb_test_illegal+=1
        	#if (line.find(" INFO")!=-1):
        	   #if (short_summary==0):print line,
        	   #nb_test_info+=1
        	if (with_file==1):
        	   pipe.close()
           
   f.flush();

   return [nb_test_run,nb_test_fail,nb_test_illegal,nb_test_info]


# If filename cannot be opened, send output to sys.stderr
filename = "testing_results.txt"
try:
     f = open(filename, 'w')
except IOError:
     f = sys.stdout

if (short_summary==0):
   print " "
   print "---------------- Testing LAPACK95 Routines ----------------"
   print " "
   print "-- Detailed results are stored in", filename

dtypes = (
("s", "d", "c", "z"),
("REAL             ", "DOUBLE PRECISION", "COMPLEX          ", "COMPLEX16         "),
("single", "double", "complex", "dcomplex")
)

if prec=='s':
   range_prec=[0]
elif prec=='d':
   range_prec=[1]
elif prec=='sd':
   range_prec=[0,1]
elif prec=='c':
   range_prec=[2]
elif prec=='z':
   range_prec=[3]
elif prec=='cz':
   range_prec=[2,3]
else: 
   prec='x';
   range_prec=range(4)

if test=='lin':
   range_test=[13]
elif test=='eig':
   range_test=range(13)
else:  
   range_test=range(13)

list_results = [
[0, 0, 0, 0, 0],
[0, 0, 0, 0, 0],
[0, 0, 0, 0, 0],
[0, 0, 0, 0, 0],
]

for dtype in range_prec:
  letter = dtypes[0][dtype]
  name = dtypes[1][dtype]
  tname = dtypes[2][dtype]

  if (short_summary==0):
     print " "
     print "------------------------- %s ------------------------" % name
     print " "
     sys.stdout.flush()


  dtests = (
  ("nep", "sep", "svd",
  letter+"ec",letter+"ed",letter+"gg",
  letter+"gd",letter+"sb",
  letter+"bb","glm","gqr",
  "gsv","lse"),
  ("Nonsymmetric Eigenvalue Problem", "Symmetric Eigenvalue Problem", "Singular Value Decomposition",
  "Eigen Condition","Nonsymmetric Eigenvalue",
  "Nonsymmetric Generalized Eigenvalue Problem driver", "Symmetric Eigenvalue Problem", "Symmetric Eigenvalue Generalized Problem",
  "Banded Singular Value Decomposition routines", "Generalized Linear Regression Model routines", "Generalized QR and RQ factorization routines",
  "Generalized Singular Value Decomposition routines", "Constrained Linear Least Squares routines",
  "Linear Equation routines"),
  (letter+"nep", letter+"sep", letter+"svd",
  letter+"ec",letter+"ed",letter+"gg",
  letter+"gd",letter+"sb",
  letter+"bb",letter+"glm",letter+"gqr",
  letter+"gsv",letter+"lse"),
  )


  for dtest in range_test:
     nb_of_test=0
     # NEED TO SKIP SOME PRECISION (namely s and c) FOR PROTO MIXED PRECISION TESTING
     if dtest==16 and (letter=="s" or letter=="c"):
        continue
     if (with_file==1):
        cmdbase=dtests[2][dtest]+".out"
     else:
        if dtest==13:
           # LIN TESTS
           cmdbase="lin"+tname+" < INFILES/"+dtests[0][dtest]+".in > "+dtests[2][dtest]+".out"
        else:
           # EIG TESTS
           cmdbase="eig"+tname+" < INFILES/"+dtests[0][dtest]+".in > "+dtests[2][dtest]+".out"
     if (not just_errors and not short_summary):
        print "-->  Testing "+name+" "+dtests[1][dtest]+" [ "+cmdbase+" ]"
     # Run the process: either to read the file or run the LAPACK95 testing   
     nb_test = run_summary_test(f, cmdbase, short_summary)
     list_results[0][dtype]+=nb_test[0]
     list_results[1][dtype]+=nb_test[1]
     list_results[2][dtype]+=nb_test[2]
     list_results[3][dtype]+=nb_test[3]
     got_error=nb_test[1]+nb_test[2]+nb_test[3]
     
     if (not short_summary):
        if (nb_test[0]>0 and just_errors==0):
           print "-->  Tests passed: "+str(nb_test[0])
        if (nb_test[1]>0):
           print "-->  Tests failing to pass the threshold: "+str(nb_test[1])
        if (nb_test[2]>0):
           print "-->  Illegal Error: "+str(nb_test[2])
        if (nb_test[3]>0):
           print "-->  Info Error: "+str(nb_test[3])
        if (got_error>0 and just_errors==1):
           print "ERROR IS LOCATED IN "+name+" "+dtests[1][dtest]+" [ "+cmdbase+" ]"
           print ""
        if (just_errors==0):
           print ""
#     elif (got_error>0):
#        print dtests[2][dtest]+".out \t"+str(nb_test[1])+"\t"+str(nb_test[2])+"\t"+str(nb_test[3])
        
     sys.stdout.flush()
  if (list_results[0][dtype] > 0 ):
     percent_num_error=float(list_results[1][dtype])/float(list_results[0][dtype])*100
     percent_error=float(list_results[2][dtype]+list_results[3][dtype])/float(list_results[0][dtype])*100
  else:
     percent_num_error=0
     percent_error=0
  summary+=name+"\t"+str(list_results[0][dtype])+"\t\t"+str(list_results[1][dtype])+"\t("+"%.3f" % percent_num_error+"%)\t"+str(list_results[2][dtype]+list_results[3][dtype])+"\t("+"%.3f" % percent_error+"%)\t""\n"
  list_results[0][4]+=list_results[0][dtype]
  list_results[1][4]+=list_results[1][dtype]
  list_results[2][4]+=list_results[2][dtype]
  list_results[3][4]+=list_results[3][dtype]
  
if only_numbers==1:
   print str(list_results[1][4])+"\n"+str(list_results[2][4]+list_results[3][4])
else:
   print summary
   if (list_results[0][4] > 0 ):
      percent_num_error=float(list_results[1][4])/float(list_results[0][4])*100
      percent_error=float(list_results[2][4]+list_results[3][4])/float(list_results[0][4])*100
   else:
      percent_num_error=0
      percent_error=0
   if (prec=='x'):
        print "--> ALL PRECISIONS\t"+str(list_results[0][4])+"\t\t"+str(list_results[1][4])+"\t("+"%.3f" % percent_num_error+"%)\t"+str(list_results[2][4]+list_results[3][4])+"\t("+"%.3f" % percent_error+"%)\t""\n"
   if list_results[0][4] == 0:
     print "NO TESTS WERE ANALYZED, please use the -r option to run the LAPACK95 TESTING"

# This may close the sys.stdout stream, so make it the last statement
f.close()

EOF

chmod 755 lapack95_testing.py

}


