#!/usr/bin/env python3


import hashlib
import os
import subprocess


def getParameters():
    """ Reads and returns a list of tuples containing the parameters of the simulation. """
    with open('__fullbeamline/parameters.txt', 'r') as f:
        file_contents = f.read()
    parameters = []
    for line in file_contents.splitlines():
        parameters.append((line.split()[0], float(line.split()[2])))
    return tuple(parameters)


def parameterFileHash():
    """ Returns the md5 hash of the parameters file. """
    with open('__fullbeamline/parameters.txt', 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()


def runGPT():
    parameters = getParameters()
    output_file_name = '__fullbeamline/output{}.gdf'.format(parameterFileHash())
    if not os.path.isfile(output_file_name):
        gpt_command = 'gpt -o {} gpt_input'.format(output_file_name)
        for name_value_tuple in parameters:
            gpt_command += ' {}={}'.format(*name_value_tuple)
        subprocess.run(gpt_command, shell=True, check=True)
    os.link(output_file_name, '__fullbeamline/output.gdf')


def gptPostProcess():
    subprocess.run('gdfa -o __fullbeamline/statistics.gdf __fullbeamline/output.gdf position avgx avgy avgBx avgBy avgBz avgG Q', shell=True, check=True)
    subprocess.run('gdf2a -o __fullbeamline/statistics.txt -w 16 __fullbeamline/statistics.gdf', shell=True, check=True)
    with open('__fullbeamline/statistics.txt', 'r') as f:
        contents = f.read().split()
    x = contents[9]
    y = contents[10]
    Bx = contents[11]
    By = contents[12]
    Bz = contents[13]
    G = contents[14]
    Q = contents[15]
    with open('__fullbeamline/result.txt', 'w+') as f:
        f.write('0\n {}\n {}\n {}\n {}\n {}\n {}\n {}\n'.format(x, y, Bx, By, Bz, G, Q))


"""

    def compute_statistics():
    system('gdfa -o __fullbeamline/statistics.gdf output.gdf position avgx avgy avgz avgBx avgBy avgBz avgG avgt avgp numpar Q')
    system('gdf2a -o __fullbeamline/statistics -w 16 __fullbeamline/statistics.gdf')
    with open('__fullbeamline/statistics', 'r') as f:
        contents = f.read().split()
    avgx = float(contents[13])
    avgy = float(contents[14])
    avgBx = float(contents[16])
    avgBy = float(contents[17])
    avgBz = float(contents[18])
    avgG = float(contents[19])
    reference_time = float(contents[20])
    reference_momentum = float(contents[21]) * c
    numpar = int(round(float(contents[22])))
    Q = float(contents[23])
    os.remove('__fullbeamline/statistics')
    os.remove('__fullbeamline/statistics.gdf')
    system('gdf2a -o __fullbeamline/output -w 16 output.gdf x Bx y By z Bz G t')
    with open('__fullbeamline/particles', 'w+') as new:
        new.write("0\n {avgx} {avgy} {avgpx} {avgpy} {avgpz} {qtot} {pref} {npart}\n".format(
            avgx=avgx,
            avgy=avgy,
            avgpx=avgBx * avgG * me / reference_momentum,
            avgpy=avgBy * avgG * me / reference_momentum,
            avgpz=(avgBz * avgG * me / reference_momentum) - 1,
            qtot=Q,
            pref=reference_momentum,
            npart=numpar
        ))
        with open('__fullbeamline/output', 'r') as old:
            while True:
                line = old.readline()
                assert line
                line = line.split()
                if line and line[0] == "position":
                    break
            old.readline()
            line = old.readline()
            particles = []
            while line.strip():
                x, y, z, Bx, By, Bz, G, t = (float(i) for i in line.split())
                new.write("{x} {Px} {y} {Py} {z} {Pz} {t}\n".format(
                    x = x,
                    Px = Bx * G * me / reference_momentum,
                    y = y,
                    Py = By * G * me / reference_momentum,
                    z =  -Bz * c * (t - reference_time),
                    Pz = (Bz * G * me / reference_momentum) - 1,
                    t = t - reference_time,
                ))
                line = old.readline()
    os.remove('__fullbeamline/output')


def convert_data(reference_time, reference_momentum, number_of_particles, total_charge):
    system('gdf2a -o __fullbeamline/output -w 16 output.gdf x Bx y By z Bz t')
    with open('__fullbeamline/particles', 'w+') as new:
        new.write("0\n {} {} {}\n".format(total_charge, reference_momentum, number_of_particles))
        with open('__fullbeamline/output', 'r') as old:
            while True:
                line = old.readline()
                assert line
                line = line.split()
                if line and line[0] == "position":
                    break
            old.readline()
            line = old.readline()
            particles = []
            while line.strip():
                x, y, z, Bx, By, Bz, t = (float(i) for i in line.split())
                new.write("{x} {Px} {y} {Py} {z} {Pz} {t}\n".format(
                    x = x,
                    Px = Bx / math.sqrt(1 - Bz ** 2) * me / reference_momentum,
                    y = y,
                    Py = By / math.sqrt(1 - Bz ** 2) * me / reference_momentum,
                    z =  -Bz * c * (t - reference_time),
                    Pz = (Bz / math.sqrt(1 - Bz ** 2) * me / reference_momentum) - 1,
                    t = t - reference_time,
                ))
                line = old.readline()
    os.remove('__fullbeamline/output')


"""


def main():
    runGPT()
    gptPostProcess()
    os.remove('__fullbeamline/output.gdf')
    os.remove('__fullbeamline/statistics.gdf')
    os.remove('__fullbeamline/statistics.txt')
    os.remove('__fullbeamline/parameters.txt')



if __name__ == '__main__':
    main()
